<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>The Web Swan Calendar</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <!-- CONTENT SECURITY POLICY FIX -->
  <meta http-equiv="Content-Security-Policy" content="
    default-src 'self' https://cdnjs.cloudflare.com https://fonts.googleapis.com https://fonts.gstatic.com https://www.gstatic.com;
    script-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com https://www.gstatic.com;
    style-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com https://fonts.googleapis.com;
    font-src 'self' https://fonts.gstatic.com;
    connect-src 'self' https://the-webswan-calendar.firebaseio.com https://the-webswan-calendar.firebasestorage.app https://formspree.io;
    img-src 'self' data: https:;
  ">
  
  <link href="https://fonts.googleapis.com/css?family=Pacifico&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
  <style>
    /* Full-screen calendar container */
    .calendar-container {
      width: 100vw;       /* 100% of viewport width */
      height: 100vh;      /* 100% of viewport height */
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      display: flex;
      justify-content: center;
      align-items: center;
    }
    
    /* Calendar element fills container */
    #calendar {
      width: 100%;
      height: 100%;
      max-width: 100%;
      max-height: 100%;
      padding: 10px; /* optional inner padding */
    }

    /* Responsive adjustments for small devices */
    @media (max-width: 768px) {
      #calendar {
        font-size: 16px; /* adjust text size */
      }
    }

    /* Optional: make arrows/buttons larger for mobile usability */
    .calendar-nav {
      font-size: 1.5em;
    }

    /* ------------------------------------- */
    /* THEWEBSWANCALENDAR.html original styles */
    /* ------------------------------------- */
    html, body {
      height: 100%;
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      background: #f0f4f8;
      font-family: Arial, sans-serif;
    }
    body {
      min-height: 100vh;
      width: 100vw;
      box-sizing: border-box;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    .main-page {
      display: flex;
      flex-direction: column;
      align-items: center;
      width: 100%;
      min-height: 100vh;
    }
    .container {
      width: 100%;
      min-height: 100vh;
      background: #fff;
      border-radius: 0;
      box-shadow: none;
      padding: 0;
      position: relative;
      overflow: visible;
      margin: 0;
      display: flex;
      flex-direction: column;
      align-items: center;
      max-width: 600px;
    }
    .webswan-header {
      background: #07b5c2;
      min-height: 130px;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 22px 0px 14px 0px;
      box-sizing: border-box;
      border-radius: 0;
      width: 100%;
      max-width: 600px;
      margin: 0;
    }
    .webswan-header-text {
      display: flex;
      flex-direction: column;
      justify-content: center;
      color: #fff;
      font-family: 'Pacifico', cursive;
      width: 100%;
      padding: 0 0 0 0;
      box-sizing: border-box;
      align-items: center;
      position: relative; /* Add this for positioning the emoji */
    }
    .webswan-title {
      font-family: 'Pacifico', cursive;
      font-size: 2.3em;
      font-weight: normal;
      letter-spacing: 1px;
      margin-bottom: 0px;
      margin-top: 0px;
      color: #fff;
      text-shadow: 0 2px 6px rgba(0,0,0,0.12);
      text-align: center;
      width: 100%;
    }
    .webswan-subtitle {
      font-family: 'Pacifico', cursive;
      font-size: 1.15em;
      color: #fff;
      font-weight: normal;
      letter-spacing: 0.3px;
      margin: 0;
      display: flex;
      align-items: center;
      text-shadow: 0 1px 4px rgba(0,0,0,0.10);
      justify-content: center;
      width: 100%;
      text-align: center;
    }
    .webswan-subtitle .puzzle {
      font-size: 1.2em;
      margin: 0 6px;
      vertical-align: middle;
    }
    .main-content {
      padding: 0;
      width: 100%;
      flex: 1 1 auto;
      display: flex;
      flex-direction: column;
      align-items: center;
      background: #fff;
    }
    header .calendar-actions {
      display: flex;
      flex-direction: row;
      justify-content: center;
      gap: 10px;
      margin-bottom: 12px;
      margin-top: 12px;
      width: 100%;
      padding: 0 10px;
      box-sizing: border-box;
    }
    button {
      background: #2290ab;
      color: #fff;
      border: none;
      padding: 8px 18px;
      border-radius: 4px;
      cursor: pointer;
      font-weight: bold;
      transition: background 0.2s;
      font-size: 1em;
    }
    button:hover {
      background: #126981;
    }
    .calendar-header {
      width: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      margin-bottom: 8px;
      gap: 8px;
      padding: 0 10px;
      box-sizing: border-box;
    }
    .calendar-header button {
      padding: 4px 12px;
      margin: 0;
    }
    .calendar-wrap {
      width: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      margin: 0;
      padding: 0;
    }
    .calendar {
      width: 100%;
      border-collapse: collapse;
      margin: 0;
      font-size: 1.15em;
      border: 4px solid #2290ab;
      box-sizing: border-box;
      background: #fff;
    }
    .calendar th, .calendar td {
      width: 14.28%;
      min-width: 36px;
      height: 44px;
      text-align: center;
      border: 1px solid #ecf0f1;
      font-size: 1.35em;
      font-weight: bold;
      color: #1a1a1a;
      letter-spacing: 1px;
      background: #fff;
      vertical-align: middle;
      transition: background 0.2s;
    }
    .calendar th {
      background: #fff;
      color: #2c3e50;
      font-weight: bold;
      font-size: 1.18em;
    }
    .calendar td {
      cursor: pointer;
      font-size: 1.35em;
      font-weight: bold;
      color: #1a1a1a;
      background: #fff;
      position: relative;
    }
    .calendar td.past {
      color: #bbb !important;
      cursor: not-allowed !important;
      background: #f6f6f6 !important;
      pointer-events: none;
    }
    .calendar td.booked {
      background: #e74c3c;
      color: #fff;
    }
    .calendar td.blocked {
      background: #7f8c8d;
      color: #fff;
    }
    .calendar td:hover:not(.past) {
      background: #d0eaf9;
    }
    .booked-time {
      font-size: 0.7em;
      padding: 2px 4px;
      border-radius: 3px;
      margin-top: 3px;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      background: #d4edda;
      color: #155724;
      border: 1px solid #c3e6cb;
      font-weight: normal;
    }

    /* Modals for Booking, etc. from THEWEBSWANCALENDAR.html */
    .modal {
      display: none;
      position: fixed;
      z-index: 1001;
      left: 0;
      top: 0;
      width: 100vw;
      height: 100vh;
      background: rgba(44,62,80,0.2);
      align-items: center;
      justify-content: center;
      box-sizing: border-box;
    }
    .modal.show { display: flex !important; }
    .modal-content {
      background: #fff;
      padding: 32px 22px 20px 22px;
      border-radius: 8px;
      position: relative;
      max-width: 370px;
      min-width: 240px;
      width: 92vw;
      margin: 0 auto;
      display: flex;
      flex-direction: column;
      align-items: stretch;
      box-shadow: 0 3px 18px rgba(44,62,80,0.13);
      border: 2px solid #2290ab;
      max-height: 95vh;
      overflow-y: auto;
    }
    .modal-content h3 {
      color: #2290ab;
      text-align: center;
      margin-bottom: 19px;
      font-family: 'Pacifico', cursive;
      font-size: 1.2em;
      font-weight: normal;
    }
    .modal-content label {
      font-weight: 600;
      color: #2290ab;
      margin-bottom: 3px;
      font-size: 1em;
      text-align: left;
      margin-top: 6px;
    }
    .modal-content input,
    .modal-content select {
      width: 100%;
      padding: 8px 10px;
      font-size: 1em;
      border-radius: 4px;
      border: 1px solid #bdc3c7;
      margin-bottom: 8px;
      font-family: inherit;
      box-sizing: border-box;
    }
    .modal-content button[type="submit"] {
      margin-top: 10px;
      background: #2290ab;
      color: #fff;
      border: none;
      padding: 9px 0;
      border-radius: 4px;
      cursor: pointer;
      font-weight: bold;
      font-size: 1em;
      width: 100%;
      box-sizing: border-box;
    }
    .close-modal {
      position: absolute;
      top: 10px; right: 16px;
      font-size: 26px;
      cursor: pointer;
      color: #2290ab;
      font-weight: bold;
      background: none;
      border: none;
    }
    @media (max-width: 900px) {
      .container, .calendar, .calendar-wrap, .main-content, .webswan-header, .webswan-header-text, .webswan-title, .webswan-subtitle { max-width: 100vw !important; }
      .calendar th, .calendar td { font-size: 1.18em; }
    }
    @media (max-width: 700px) {
      .container, .calendar, .calendar-wrap, .main-content, .webswan-header, .webswan-header-text, .webswan-title, .webswan-subtitle { max-width: 100vw !important; }
      .calendar th, .calendar td { font-size: 1.13em; }
    }
    .calendar-footer {
      margin: 24px auto 0 auto;
      max-width: 430px;
      text-align: center;
      box-sizing: border-box;
      width: 95vw;
    }
    .contact-section {
      margin: 0 auto 10px auto;
      max-width: 420px;
      text-align: center;
      padding: 14px 10px 14px 10px;
      background: #f3f9fc;
      border-radius: 8px;
      box-sizing: border-box;
      box-shadow: 0 2px 10px rgba(0,0,0,0.07);
    }
    .contact-section .form-title {
      font-family: 'Pacifico', cursive;
      color: #07b5c2;
      margin-bottom: 12px;
      font-size: 2em;
      font-weight: normal;
    }
    .contact-section label {
      display: block;
      font-weight: 600;
      margin-top: 10px;
      margin-bottom: 4px;
      font-size: 1em;
      text-align: left;
    }
    .contact-section input, .contact-section textarea {
      width: 100%;
      max-width: 400px;
      box-sizing: border-box;
      margin-bottom: 10px;
      padding: 8px 10px;
      font-size: 1em;
      border-radius: 4px;
      border: 1px solid #bdc3c7;
      display: block;
      font-family: inherit;
    }
    .contact-section button[type="submit"] {
      margin-top: 8px;
      width: 100%;
      max-width: 180px;
      background: #07b5c2;
      color: #fff;
    }
    .contact-section button[type="submit"]:hover {
      background: #2290ab;
    }
    .contact-section .form-instructions {
      font-size: 1.07em;
      color: #07b5c2;
      margin-bottom: 16px;
      margin-top: 0;
      font-family: 'Segoe UI', Arial, sans-serif;
      font-weight: 500;
      text-align: center;
    }
    .calendar-footer .disclaimer {
      font-size: 0.98em;
      color: #333;
      background: #f3f9fc;
      border-radius: 4px;
      padding: 10px 12px;
      margin-bottom: 10px;
      border: 1px solid #dbeaf3;
      line-height: 1.5;
      text-align: center;
      width: 98%;
      box-sizing: border-box;
      margin-top: 20px;
    }

    /* ------------------------------------- */
    /* Personal Calendar back office styles */
    /* ------------------------------------- */
    
    /* New container for the back office to match the calendar's size */
    .back-office-container {
        width: 100%;
        max-width: 600px;
        border: 4px solid #2290ab; /* Matches calendar border */
        background: #fff;
        box-sizing: border-box;
        margin: 20px auto;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .personal-calendar-header {
      background: #07b5c2;
      color: #fff;
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 20px;
      font-family: 'Pacifico', cursive;
      font-size: 1.5em;
      position: relative;
    }
    .personal-calendar-header .logo {
      font-size: 1.2em;
    }
    .personal-calendar-main {
      padding: 20px;
      display: flex; /* Make it a flex container */
      flex-direction: column; /* Stack children vertically */
      align-items: center; /* Center horizontally */
      width: 100%; /* Take full width */
      padding-top: 0; /* Adjusted padding to better align with the banner */
    }
    .personal-calendar-controls {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 10px;
      margin-bottom: 20px;
      width: 100%; /* Make controls take full width */
      max-width: 600px; /* Limit width to match calendar */
      margin-top: 20px;
    }
    .personal-calendar-controls button {
      flex-grow: 1;
      max-width: 180px;
      background: #e6f7ff;
      color: #007bff;
      border: 1px solid #007bff;
    }
    .personal-calendar-controls .block-btn {
      background: #ffcccc;
      color: #dc3545;
      border: 1px solid #dc3545;
    }
    .personal-calendar-controls .unblock-btn {
      background: #d4edda;
      color: #28a745;
      border: 1px solid #28a745;
    }
    .personal-calendar-controls .go-back-btn {
      background: #adb5bd;
      color: #fff;
      border: none;
      width: 100%;
      max-width: 400px;
    }
    .bell-notification {
      position: absolute;
      top: 50%;
      right: 20px;
      transform: translateY(-50%);
      font-size: 1.5em;
      color: #f7b731;
      cursor: pointer;
      transition: transform 0.3s ease-in-out;
    }
    .bell-notification.shake {
      animation: shake 0.8s cubic-bezier(.36, .07, .19, .97) both;
    }
    @keyframes shake {
      10%, 90% { transform: translate3d(-1px, -50%, 0); }
      20%, 80% { transform: translate3d(2px, -50%, 0); }
      30%, 50%, 70% { transform: translate3d(-4px, -50%, 0); }
      40%, 60% { transform: translate3d(4px, -50%, 0); }
    }
    .blocked-day-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 8px;
      border: 1px solid #ddd;
      border-radius: 4px;
      margin-bottom: 5px;
    }
    .blocked-day-item button {
      background: #f44336;
      color: white;
      border: none;
      padding: 5px 10px;
      border-radius: 3px;
      cursor: pointer;
    }
    
    /* Styles for the single, fading emojis */
    .fading-emoji {
      position: absolute;
      font-size: 2.2em; /* Made it bigger */
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      animation: pop-and-fade 2s ease-in-out forwards;
      opacity: 0;
      pointer-events: none;
    }
    
    @keyframes pop-and-fade {
      0% {
        opacity: 0;
        transform: translate(-50%, -50%) scale(0.5);
      }
      20% {
        opacity: 1;
        transform: translate(-50%, -50%) scale(1.1);
      }
      80% {
        opacity: 1;
        transform: translate(-50%, -50%) scale(1);
      }
      100% {
        opacity: 0;
        transform: translate(-50%, -50%) scale(0.5);
      }
    }

    /* Styles for booking modal time slots */
    .time-slot {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 8px;
      border: 1px solid #ddd;
      border-radius: 4px;
      margin-bottom: 5px;
      cursor: pointer;
    }
    .time-slot.blocked {
      background: #f8d7da;
      color: #721c24;
      border-color: #f5c6cb;
      cursor: not-allowed;
    }
    .time-slot:not(.blocked):hover {
      background: #e9ecef;
    }
    
    /* New styles for "other" text box */
    #otherReasonContainer {
      display: none;
      margin-top: 10px;
    }
    #bookingForm textarea {
        width: 100%;
        padding: 8px 10px;
        font-size: 1em;
        border-radius: 4px;
        border: 1px solid #bdc3c7;
        margin-bottom: 8px;
        font-family: inherit;
        box-sizing: border-box;
    }

    /* ------------------------------------- */
    /* NEW BANNER STYLES */
    /* ------------------------------------- */
    .back-office-banner {
      background: #07b5c2; /* The blue from the first picture */
      color: #fff;
      padding: 15px 0;
      text-align: center;
      font-family: 'Pacifico', cursive;
      font-size: 2em;
      position: relative;
      width: 100%;
      box-sizing: border-box;
      overflow: hidden; /* Hide overflowing emojis */
      height: 150px; /* Adjusted height for visibility */
      display: flex;
      align-items: center;
      justify-content: center;
      border-bottom: 4px solid #fff;
    }

    .back-office-banner .banner-text {
      position: absolute; /* Allow emoji to overlay */
      z-index: 1;
    }

    .back-office-banner .animated-emoji {
      position: absolute;
      font-size: 2.5em; /* Reduced emoji size for better fit */
      opacity: 0;
      animation-duration: 3s; /* Total animation time for one emoji */
      animation-fill-mode: forwards;
      z-index: 2; /* Ensure emoji is above text */
      text-shadow: 0 0 10px rgba(0,0,0,0.5); /* Add some shadow for pop */
    }

    /* New Keyframe Animations for Emojis */
    @keyframes bounce-spin-shake {
      0% {
        opacity: 0;
        transform: translate(-100%, -50%) scale(0.5) rotate(0deg); /* Start off-screen left, smaller */
      }
      20% {
        opacity: 1;
        transform: translate(-50%, -50%) scale(1.2) rotate(30deg); /* Bounce in, slightly larger, spin */
      }
      40% {
        transform: translate(-50%, -50%) scale(1) rotate(-20deg); /* Settle, spin back */
      }
      60% {
        transform: translate(-50%, -50%) scale(1.1) rotate(10deg); /* Slight shake/bounce */
      }
      80% {
        opacity: 1;
        transform: translate(-50%, -50%) scale(1) rotate(0deg); /* Back to normal size, no spin */
      }
      100% {
        opacity: 0;
        transform: translate(100%, -50%) scale(0.8) rotate(0deg); /* Move off-screen right, slightly smaller */
      }
    }

    .back-office .calendar-header {
        margin-top: 20px; /* Add some space below the new banner */
    }
    
    /* New styles for scrollable container */
    .scrollable-content-container {
        width: 100%;
        max-width: 600px;
        max-height: 50vh; /* Set a max height */
        overflow-y: auto; /* Enable vertical scrolling */
        padding: 0 10px;
        box-sizing: border-box;
    }

    /* New styles for the key button */
    .exit-details-btn {
      background: #5d5d5d;
      color: #fff;
      margin-left: 10px;
    }

    /* Edit modal styles */
    .edit-modal {
      background: #fff;
      padding: 20px;
      border-radius: 8px;
      max-width: 400px;
      width: 90vw;
      margin: 20px auto;
      border: 2px solid #2290ab;
    }
    
  </style>
</head>
<body>
  <div id="mainPage" class="main-page">
    <div class="container" id="mainAppContainer">
      <div class="webswan-header">
        <div class="webswan-header-text">
          <div class="webswan-title">The Web Swan</div>
          <div class="webswan-subtitle"> Putting The Pieces Together <span class="puzzle">🧩</span> For Your Long-Term Online Success </div>
          <span id="animatedEmoji" class="fading-emoji"></span>
        </div>
      </div>
      <div class="main-content">
        <header>
          <div class="calendar-actions">
            <button id="adminLoginBtn" type="button">Admin Login</button>
          </div>
          <div class="calendar-header">
            <button id="prevBtn">&lt;</button>
            <span id="currentMonthYear"></span>
            <button id="nextBtn">&gt;</button>
          </div>
        </header>
        <div class="calendar-wrap">
          <table class="calendar" id="calendar">
            <thead>
              <tr>
                <th>Sun</th><th>Mon</th><th>Tue</th><th>Wed</th>
                <th>Thu</th><th>Fri</th><th>Sat</th>
              </tr>
            </thead>
            <tbody id="calendarBody"></tbody>
          </table>
        </div>
      </div>
    </div>
    <footer class="calendar-footer">
      <div class="contact-section">
        <div class="form-instructions"> Not ready for an appointment? Have a question?<br> Fill out the form and <b>I</b> will get back to you <span style="font-size:1.2em;">🎯</span></div>
        <div class="form-title">Contact Us</div>
        <form id="contactForm" action="https://formspree.io/f/mldwdpgr" method="POST" autocomplete="off">
          <label for="contactEmail">Your email:</label>
          <input type="email" name="email" id="contactEmail" required placeholder="Enter your email" autocomplete="off">
          
          <label for="contactPhone">Your phone number (optional):</label>
          <input type="text" name="phone" id="contactPhone" placeholder="Enter phone number" autocomplete="off">
          
          <label for="contactMessage">Your message:</label>
          <textarea name="message" id="contactMessage" rows="5" maxlength="1500" required placeholder="Tell us how we can help you..."></textarea>
          
          <input type="hidden" name="_subject" value="New Contact Form Submission - The Web Swan">
          <input type="hidden" name="_replyto" id="replyToEmail">
          <input type="hidden" name="form_type" value="contact_form">
          
          <button type="submit">Send</button>
        </form>
      </div>
      <div class="disclaimer"> <strong>Disclaimer:</strong> We collect your information solely to respond to your inquiry and communicate with you. We do not sell or share your information with any third party. <a href="https://www.thewebswan.com/privacy-policy" target="_blank">Click here to view our Privacy Policy</a>. </div>
    </footer>
  </div>

  <div id="backOfficeSection" class="back-office" style="display:none; width: 100%;">
    <div class="back-office-container">
      <div class="back-office-banner">
        <div class="banner-text">Personal Calendar</div>
        <span id="backOfficeAnimatedEmoji" class="animated-emoji"></span>
      </div>
      <div class="personal-calendar-main">
        <div class="calendar-header">
          <button id="prevBackBtn">&lt;</button>
          <span id="backCurrentMonthYear"></span>
          <button id="nextBackBtn">&gt;</button>
        </div>
        <div class="calendar-wrap">
          <table class="calendar" id="backCalendar">
            <thead>
              <tr><th>Sun</th><th>Mon</th><th>Tue</th><th>Wed</th><th>Thu</th><th>Fri</th><th>Sat</th></tr>
            </thead>
            <tbody id="backCalendarBody"></tbody>
          </table>
        </div>
        <div class="personal-calendar-controls">
          <button id="viewAppointmentsBtn">Appointments</button>
          <button id="viewEventsBtn">View Events</button>
          <button id="addEventsBtn">Add Event</button>
          <button id="viewTasksBtn">View Tasks</button>
          <button id="addTasksBtn">Add Task</button>
          <button id="unblockDaysBtn" class="unblock-btn">Unblock Day/Hours</button>
          <button id="blockDaysBtn" class="block-btn">Block Day/Hours</button>
          <button id="goBackBtn" style="background:#14395d;color:#fff;">Go Back</button>
        </div>
        <div id="scrollableContentContainer" class="scrollable-content-container">
          <ul id="appointmentsList" style="list-style:none;padding:0; display:none; margin-top: 20px; width: 100%;"></ul>
          <ul id="eventsList" style="list-style:none;padding:0; display:none; margin-top: 20px; width: 100%;"></ul>
          <ul id="tasksList" style="list-style:none;padding:0; display:none; margin-top: 20px; width: 100%;"></ul>
          <ul id="blockedDaysList" style="list-style:none;padding:0; display:none; margin-top: 20px; width: 100%;"></ul>
        </div>
        <div style="display:none; width: 100%; max-width: 600px; text-align: center;" id="saveAllContainer">
          <button id="saveAllBtn" style="margin-top: 20px; width:calc(50% - 10px); max-width: 200px;">Save Changes</button>
          <button id="exitDetailsBtn" class="exit-details-btn" style="margin-top: 20px; width:calc(50% - 10px); max-width: 200px;"><i class="fas fa-key"></i></button>
        </div>
      </div>
    </div>
  </div>

  <!-- Modals -->
  <div id="adminModal" class="modal">
    <div class="modal-content" id="loginModalContent">
      <button class="close-modal" id="closeAdminModal">&times;</button>
      <h2>Admin Login</h2>
      <form id="loginForm" autocomplete="off">
        <label for="adminPwd">Password</label>
        <input type="password" id="adminPwd" required autocomplete="off">
        <button type="submit">Login</button>
        <div class="login-error" id="adminLoginMsg">Incorrect password.</div>
        <div class="login-success" id="loginSuccess"></div>
      </form>
    </div>
  </div>

  <div id="bookingModal" class="modal">
    <div class="modal-content">
      <button class="close-modal" id="closeBookingModal">&times;</button>
      <h3 id="bookingModalTitle">Book Appointment</h3>
      <div id="bookingDateText" style="margin-bottom:14px;"></div>
      <div id="timeSlotsContainer"></div>
      <div id="bookingFormContainer">
          <form id="bookingForm" action="https://formspree.io/f/mldwdpgr" method="POST" style="display:none;">
            <input type="hidden" name="_subject" value="New Appointment Booking - The Web Swan">
            <input type="hidden" name="_replyto" id="bookingReplyTo">
            <input type="hidden" name="form_type" value="appointment_booking">
            
            <label for="bookingName">Name:</label>
            <input type="text" id="bookingName" name="name" required>
            
            <label for="bookingEmail">Email:</label>
            <input type="email" id="bookingEmail" name="email" required>
            
            <label for="bookingPhone">Phone:</label>
            <input type="text" id="bookingPhone" name="phone" required>
            
            <label for="bookingReason">Reason for Appointment:</label>
            <select id="bookingReason" name="reason" required>
              <option value="">Select a reason</option>
              <option value="FREE website demo">FREE website demo</option>
              <option value="custom calendar">custom calendar</option>
              <option value="a form">a form</option>
              <option value="reputation management">reputation management</option>
              <option value="an ad campaign video/script">an ad campaign video/script</option>
              <option value="effective SEO">effective SEO</option>
              <option value="collaboration">collaboration</option>
              <option value="a free website analyst">a free website analyst</option>
              <option value="other">Other</option>
            </select>
            
            <div id="otherReasonContainer">
                <label for="otherReasonText">Please specify:</label>
                <textarea id="otherReasonText" name="other_reason" rows="3" maxlength="100"></textarea>
            </div>
            
            <label for="bookingComments">Comments (100 words max):</label>
            <textarea id="bookingComments" name="comments" rows="5" maxlength="500"></textarea>
            
            <input type="hidden" name="appointment_date" id="appointmentDateInput">
            <input type="hidden" name="appointment_time" id="appointmentTimeInput">
            
            <button type="submit">Book Appointment</button>
          </form>
      </div>
    </div>
  </div>

  <div id="blockModal" class="modal">
    <div class="modal-content">
      <button class="close-modal" id="closeBlockModal">&times;</button>
      <h3>Block a Day or Time</h3>
      <label for="blockDate">Select Date:</label>
      <input type="date" id="blockDate">
      <div style="display:flex; justify-content:space-between; margin:10px 0;">
        <label for="isAllDay">All Day Block?</label>
        <input type="checkbox" id="isAllDay">
      </div>
      <label for="blockReason">Reason:</label>
      <input type="text" id="blockReason">
      <div id="timeRangeContainer">
        <label for="blockStartTime">Start Time:</label>
        <input type="time" id="blockStartTime">
        <label for="blockEndTime">End Time:</label>
        <input type="time" id="blockEndTime">
      </div>
      <button id="addBlockBtn" type="submit">Add Block</button>
    </div>
  </div>

  <div id="eventModal" class="modal">
    <div class="modal-content">
      <button class="close-modal" id="closeEventModal">&times;</button>
      <h3 id="eventModalTitle">Add New Event</h3>
      <form id="addEventForm">
        <label for="eventDate">Event Date:</label>
        <input type="date" id="eventDate" required>
        <label for="eventText">Event Description:</label>
        <input type="text" id="eventText" required>
        <button type="submit" id="eventSubmitBtn">Add Event</button>
      </form>
    </div>
  </div>

  <div id="taskModal" class="modal">
    <div class="modal-content">
      <button class="close-modal" id="closeTaskModal">&times;</button>
      <h3 id="taskModalTitle">Add New Task</h3>
      <form id="addTaskForm">
        <label for="taskDate">Task Date:</label>
        <input type="date" id="taskDate" required>
        <label for="taskText">Task Description:</label>
        <select id="taskText" required>
          <option value="">Select a task</option>
          <option value="Call client">Call client</option>
          <option value="Collaborate">Collaborate</option>
          <option value="Zoom meeting">Zoom meeting</option>
          <option value="Phone call">Phone call</option>
          <option value="Send text">Send text</option>
          <option value="Send email">Send email</option>
          <option value="Prepare demo">Prepare demo</option>
          <option value="Work on web design">Work on web design</option>
          <option value="Vacation">Vacation</option>
          <option value="Doctor">Doctor</option>
          <option value="Live networking">Live networking</option>
          <option value="Online networking">Online networking</option>
          <option value="Travel">Travel</option>
          <option value="Party">Party</option>
          <option value="Event">Event</option>
        </select>
        <button type="submit" id="taskSubmitBtn">Add Task</button>
      </form>
    </div>
  </div>

  <!-- SIMPLIFIED FIREBASE SETUP -->
  <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js"></script>
  <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-firestore.js"></script>
  <script>
    // Simple Firebase initialization
    const firebaseConfig = {
      apiKey: "AIzaSyB50YiZNBFj0dgwwA9iEHqqvAurQ5HcvD0",
      authDomain: "the-webswan-calendar.firebaseapp.com",
      projectId: "the-webswan-calendar",
      storageBucket: "the-webswan-calendar.firebasestorage.app",
      messagingSenderId: "412434435868",
      appId: "1:412434435868:web:f850dee0d43a406cc634d9",
      measurementId: "G-P3YX9PCV63"
    };

    // Initialize Firebase
    firebase.initializeApp(firebaseConfig);
    const db = firebase.firestore();

    console.log("Firebase initialized successfully!");

    // ---------------------------
    // Your existing elements and variables
    // ---------------------------
    const calendarBody = document.getElementById('calendarBody');
    const currentMonthYearEl = document.getElementById('currentMonthYear');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const bookingForm = document.getElementById('bookingForm');
    const closeBookingModal = document.getElementById('closeBookingModal');
    const bookingModal = document.getElementById('bookingModal');
    const timeSlotsContainer = document.getElementById('timeSlotsContainer');
    const bookingReasonSelect = document.getElementById('bookingReason');
    const otherReasonContainer = document.getElementById('otherReasonContainer');
    const bookingNameInput = document.getElementById('bookingName');
    const bookingEmailInput = document.getElementById('bookingEmail');
    const bookingPhoneInput = document.getElementById('bookingPhone');
    const bookingCommentsInput = document.getElementById('bookingComments');
    const bookingModalTitle = document.getElementById('bookingModalTitle');
    const appointmentDateInput = document.getElementById('appointmentDateInput');
    const appointmentTimeInput = document.getElementById('appointmentTimeInput');
    const bookingFormContainer = document.getElementById('bookingFormContainer');
    const animatedEmoji = document.getElementById('animatedEmoji');

    // Back office elements
    const backCalendarBody = document.getElementById('backCalendarBody');
    const backCurrentMonthYear = document.getElementById('backCurrentMonthYear');
    const prevBackBtn = document.getElementById('prevBackBtn');
    const nextBackBtn = document.getElementById('nextBackBtn');
    const backOfficeAnimatedEmoji = document.getElementById('backOfficeAnimatedEmoji');

    // Control elements
    const appointmentsList = document.getElementById('appointmentsList');
    const eventsList = document.getElementById('eventsList');
    const tasksList = document.getElementById('tasksList');
    const blockedDaysList = document.getElementById('blockedDaysList');
    const saveAllContainer = document.getElementById('saveAllContainer');
    const exitDetailsBtn = document.getElementById('exitDetailsBtn');

    const viewAppointmentsBtn = document.getElementById('viewAppointmentsBtn');
    const viewEventsBtn = document.getElementById('viewEventsBtn');
    const addEventsBtn = document.getElementById('addEventsBtn');
    const viewTasksBtn = document.getElementById('viewTasksBtn');
    const addTasksBtn = document.getElementById('addTasksBtn');
    const unblockDaysBtn = document.getElementById('unblockDaysBtn');
    const blockDaysBtn = document.getElementById('blockDaysBtn');
    const goBackBtn = document.getElementById('goBackBtn');
    const saveAllBtn = document.getElementById('saveAllBtn');
    const addBlockBtn = document.getElementById('addBlockBtn');

    // Modal elements
    const adminLoginBtn = document.getElementById('adminLoginBtn');
    const adminModal = document.getElementById('adminModal');
    const closeAdminModal = document.getElementById('closeAdminModal');
    const adminPwd = document.getElementById('adminPwd');
    const adminLoginMsg = document.getElementById('adminLoginMsg');
    const loginForm = document.getElementById('loginForm');
    const backOfficeSection = document.getElementById('backOfficeSection');
    const mainPage = document.getElementById('mainPage');

    // Event and Task modal elements
    const eventModal = document.getElementById('eventModal');
    const closeEventModal = document.getElementById('closeEventModal');
    const eventDateInput = document.getElementById('eventDate');
    const eventText = document.getElementById('eventText');
    const addEventForm = document.getElementById('addEventForm');
    const eventModalTitle = document.getElementById('eventModalTitle');
    const eventSubmitBtn = document.getElementById('eventSubmitBtn');

    const taskModal = document.getElementById('taskModal');
    const closeTaskModal = document.getElementById('closeTaskModal');
    const taskDateInput = document.getElementById('taskDate');
    const taskTextSelect = document.getElementById('taskText');
    const addTaskForm = document.getElementById('addTaskForm');
    const taskModalTitle = document.getElementById('taskModalTitle');
    const taskSubmitBtn = document.getElementById('taskSubmitBtn');

    // Block modal elements
    const blockModal = document.getElementById('blockModal');
    const closeBlockModal = document.getElementById('closeBlockModal');
    const blockDateInput = document.getElementById('blockDate');
    const isAllDayCheckbox = document.getElementById('isAllDay');
    const blockReasonInput = document.getElementById('blockReason');
    const timeRangeContainer = document.getElementById('timeRangeContainer');
    const blockStartTimeInput = document.getElementById('blockStartTime');
    const blockEndTimeInput = document.getElementById('blockEndTime');

    // Contact form elements
    const contactForm = document.getElementById('contactForm');
    const contactEmail = document.getElementById('contactEmail');
    const replyToEmail = document.getElementById('replyToEmail');
    const bookingReplyTo = document.getElementById('bookingReplyTo');

    // ---------------------------
    // Data - SIMPLIFIED VERSION
    // ---------------------------
    let currentDate = new Date();
    let backDate = new Date();
    let blockedDays = [];
    let tasks = [];
    let appointments = [];
    let events = [];
    let currentBookingDate = '';
    let currentBookingTime = '';
    let currentEditIndex = -1;
    let currentEditType = '';

    // Helper: format YYYY-MM-DD
    function formatDate(date) {
      const year = date.getFullYear();
      const month = (date.getMonth() + 1).toString().padStart(2, '0');
      const day = date.getDate().toString().padStart(2, '0');
      return `${year}-${month}-${day}`;
    }

    // SIMPLIFIED: Load data from localStorage first, then try Firestore
    function loadAllData() {
      console.log("Loading data...");
      
      // Try localStorage first for immediate display
      blockedDays = JSON.parse(localStorage.getItem('blockedDays')) || [];
      tasks = JSON.parse(localStorage.getItem('tasks')) || [];
      appointments = JSON.parse(localStorage.getItem('appointments')) || [];
      events = JSON.parse(localStorage.getItem('events')) || [];
      
      // Render calendar immediately
      renderMonthCalendar(currentDate, calendarBody, currentMonthYearEl);
      renderMonthCalendar(backDate, backCalendarBody, backCurrentMonthYear, true);
      
      // Then try to load from Firestore in background
      loadFromFirestore();
    }

    // Load from Firestore (non-blocking)
    async function loadFromFirestore() {
      try {
        console.log("Trying to load from Firestore...");
        
        const blockedDaysSnapshot = await db.collection('blockedDays').get();
        if (!blockedDaysSnapshot.empty) {
          blockedDays = blockedDaysSnapshot.docs.map(doc => doc.data());
          localStorage.setItem('blockedDays', JSON.stringify(blockedDays));
        }
        
        const appointmentsSnapshot = await db.collection('appointments').get();
        if (!appointmentsSnapshot.empty) {
          appointments = appointmentsSnapshot.docs.map(doc => doc.data());
          localStorage.setItem('appointments', JSON.stringify(appointments));
        }
        
        const eventsSnapshot = await db.collection('events').get();
        if (!eventsSnapshot.empty) {
          events = eventsSnapshot.docs.map(doc => doc.data());
          localStorage.setItem('events', JSON.stringify(events));
        }
        
        const tasksSnapshot = await db.collection('tasks').get();
        if (!tasksSnapshot.empty) {
          tasks = tasksSnapshot.docs.map(doc => doc.data());
          localStorage.setItem('tasks', JSON.stringify(tasks));
        }
        
        console.log("Firestore data loaded successfully!");
        // Re-render with Firestore data
        renderMonthCalendar(currentDate, calendarBody, currentMonthYearEl);
        renderMonthCalendar(backDate, backCalendarBody, backCurrentMonthYear, true);
        
      } catch (error) {
        console.log("Using localStorage data only:", error);
      }
    }

    // SIMPLIFIED: Save to both localStorage and Firestore
    async function saveBlockedDays() {
      localStorage.setItem('blockedDays', JSON.stringify(blockedDays));
      try {
        // Clear and re-add to Firestore
        const snapshot = await db.collection('blockedDays').get();
        const batch = db.batch();
        snapshot.docs.forEach(doc => batch.delete(doc.ref));
        await batch.commit();
        
        for (const day of blockedDays) {
          await db.collection('blockedDays').add(day);
        }
        console.log("Blocked days saved to Firestore!");
      } catch (error) {
        console.log("Failed to save to Firestore, using localStorage:", error);
      }
    }

    async function saveAppointments() {
      localStorage.setItem('appointments', JSON.stringify(appointments));
      try {
        const snapshot = await db.collection('appointments').get();
        const batch = db.batch();
        snapshot.docs.forEach(doc => batch.delete(doc.ref));
        await batch.commit();
        
        for (const appointment of appointments) {
          await db.collection('appointments').add(appointment);
        }
        console.log("Appointments saved to Firestore!");
      } catch (error) {
        console.log("Failed to save appointments to Firestore:", error);
      }
    }

    async function saveEvents() {
      localStorage.setItem('events', JSON.stringify(events));
      try {
        const snapshot = await db.collection('events').get();
        const batch = db.batch();
        snapshot.docs.forEach(doc => batch.delete(doc.ref));
        await batch.commit();
        
        for (const event of events) {
          await db.collection('events').add(event);
        }
        console.log("Events saved to Firestore!");
      } catch (error) {
        console.log("Failed to save events to Firestore:", error);
      }
    }

    async function saveTasks() {
      localStorage.setItem('tasks', JSON.stringify(tasks));
      try {
        const snapshot = await db.collection('tasks').get();
        const batch = db.batch();
        snapshot.docs.forEach(doc => batch.delete(doc.ref));
        await batch.commit();
        
        for (const task of tasks) {
          await db.collection('tasks').add(task);
        }
        console.log("Tasks saved to Firestore!");
      } catch (error) {
        console.log("Failed to save tasks to Firestore:", error);
      }
    }

    // ---------------------------
    // CALENDAR RENDERING
    // ---------------------------
    function renderMonthCalendar(date, bodyEl, headerEl, isBackOffice = false) {
      const year = date.getFullYear();
      const month = date.getMonth();
      const firstDay = new Date(year, month, 1);
      const lastDay = new Date(year, month + 1, 0);
      const daysInMonth = lastDay.getDate();
      const startDayOfWeek = firstDay.getDay();

      headerEl.textContent = `${firstDay.toLocaleString('default', { month: 'long' })} ${year}`;
      bodyEl.innerHTML = '';

      let row = document.createElement('tr');
      for (let i = 0; i < startDayOfWeek; i++) {
        const cell = document.createElement('td');
        row.appendChild(cell);
      }

      for (let i = 1; i <= daysInMonth; i++) {
        if (row.children.length === 7) {
          bodyEl.appendChild(row);
          row = document.createElement('tr');
        }

        const cell = document.createElement('td');
        const day = new Date(year, month, i);
        const today = new Date();
        const formattedDate = formatDate(day);

        cell.textContent = i;
        cell.dataset.date = formattedDate;

        if (day < today && formattedDate !== formatDate(today)) {
          cell.classList.add('past');
        }

        const isBlocked = blockedDays.some(b => b.date === formattedDate && b.isAllDay);
        if (isBlocked) {
          cell.classList.add('blocked');
        }
        
        cell.onclick = (e) => {
          if (!isBackOffice && !cell.classList.contains('past') && !cell.classList.contains('blocked')) {
            showBookingModal(formattedDate);
          }
        };

        row.appendChild(cell);
      }

      while (row.children.length < 7) {
        const cell = document.createElement('td');
        row.appendChild(cell);
      }
      bodyEl.appendChild(row);
    }

    // ---------------------------
    // ADMIN LOGIN FUNCTIONALITY
    // ---------------------------
    function handleLogin(e) {
      e.preventDefault();
      console.log("Login attempted with password:", adminPwd.value);
      
      if (adminPwd.value === "2169") {
        console.log("Login successful!");
        adminModal.classList.remove('show');
        mainPage.style.display = 'none';
        backOfficeSection.style.display = 'flex';
        startBackOfficeEmojiAnimation();
      } else {
        console.log("Login failed - incorrect password");
        adminLoginMsg.style.display = 'block';
      }
    }

    function startBackOfficeEmojiAnimation() {
      const backOfficeEmojis = ['🧩', '🎯', '✨', '🗓️', '✅', '💡', '🚀', '⭐', '❤️', '💼'];
      let currentEmojiIndex = 0;
      
      if (backOfficeAnimatedEmoji) {
        backOfficeAnimatedEmoji.style.animation = 'none';
        backOfficeAnimatedEmoji.offsetHeight;
      }

      setInterval(() => {
        if (backOfficeAnimatedEmoji) {
          backOfficeAnimatedEmoji.textContent = backOfficeEmojis[currentEmojiIndex];
          backOfficeAnimatedEmoji.style.animation = 'none';
          void backOfficeAnimatedEmoji.offsetWidth;
          backOfficeAnimatedEmoji.style.animation = 'bounce-spin-shake 3s ease-in-out forwards';
          currentEmojiIndex = (currentEmojiIndex + 1) % backOfficeEmojis.length;
        }
      }, 3000);
    }

    // ---------------------------
    // BOOKING FUNCTIONALITY WITH FORMSPREE
    // ---------------------------
    function showBookingModal(date, appointmentIndex = -1) {
      currentBookingDate = date;
      currentEditIndex = appointmentIndex;
      
      document.getElementById('bookingDateText').textContent = `Booking for: ${date}`;
      bookingNameInput.value = '';
      bookingEmailInput.value = '';
      bookingPhoneInput.value = '';
      bookingCommentsInput.value = '';
      bookingReasonSelect.value = '';
      otherReasonText.value = '';
      otherReasonContainer.style.display = 'none';

      if (appointmentIndex !== -1) {
        const appointment = appointments[appointmentIndex];
        bookingModalTitle.textContent = 'Edit Appointment';
        document.getElementById('bookingDateText').textContent = `Edit appointment for: ${appointment.date}`;
        
        bookingNameInput.value = appointment.name;
        bookingEmailInput.value = appointment.email || '';
        bookingPhoneInput.value = appointment.phone;
        bookingCommentsInput.value = appointment.comments || '';

        const reasonInOptions = Array.from(bookingReasonSelect.options).some(o => o.value === appointment.reason);
        if (reasonInOptions) {
          bookingReasonSelect.value = appointment.reason;
        } else {
          bookingReasonSelect.value = 'other';
          otherReasonContainer.style.display = 'block';
          otherReasonText.value = appointment.reason;
        }
        
        timeSlotsContainer.style.display = 'none';
        bookingForm.style.display = 'block';
      } else {
        bookingModalTitle.textContent = 'Book Appointment';
        timeSlotsContainer.innerHTML = '';
        timeSlotsContainer.style.display = 'block';
        bookingForm.style.display = 'none';

        const startTime = 9;
        const endTime = 17;
        const timeInterval = 30;

        const dateBlocked = blockedDays.some(b => b.date === date && b.isAllDay);
        if (dateBlocked) {
          timeSlotsContainer.innerHTML = 'All day is blocked.';
          return;
        }

        const hoursBlocked = blockedDays.filter(b => b.date === date && !b.isAllDay);

        for (let h = startTime; h <= endTime; h++) {
          for (let m = 0; m < 60; m += timeInterval) {
            const time = `${h.toString().padStart(2, '0')}:${m.toString().padStart(2, '0')}`;
            
            const isTimeBlocked = hoursBlocked.some(b => {
              const start = b.startTime;
              const end = b.endTime;
              return time >= start && time < end;
            });
            
            const timeSlotEl = document.createElement('div');
            timeSlotEl.className = `time-slot ${isTimeBlocked ? 'blocked' : ''}`;
            timeSlotEl.textContent = time;
            timeSlotEl.dataset.time = time;
            
            if (!isTimeBlocked) {
              timeSlotEl.addEventListener('click', () => {
                currentBookingTime = time;
                alert(`You have selected an appointment for ${date} at ${time}. Please fill out the form.`);
                document.getElementById('bookingForm').style.display = 'block';
                appointmentDateInput.value = date;
                appointmentTimeInput.value = time;
                timeSlotsContainer.style.display = 'none';
                bookingFormContainer.scrollIntoView({ behavior: 'smooth' });
              });
            }
            
            timeSlotsContainer.appendChild(timeSlotEl);
          }
        }
      }

      bookingModal.classList.add('show');
    }

    // Enhanced booking form submission with Formspree
    bookingForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const name = bookingNameInput.value;
      const email = bookingEmailInput.value;
      const phone = bookingPhoneInput.value;
      const comments = bookingCommentsInput.value;
      let reason = bookingReasonSelect.value;
      
      if (reason === 'other') {
        reason = otherReasonText.value;
      }

      // Set reply-to email for Formspree
      if (bookingReplyTo && email) {
        bookingReplyTo.value = email;
      }

      try {
        if (currentEditIndex !== -1) {
          // Editing existing appointment
          appointments[currentEditIndex] = { 
            date: appointments[currentEditIndex].date, 
            time: appointments[currentEditIndex].time, 
            name, email, phone, reason, comments, 
            completed: appointments[currentEditIndex].completed 
          };
        } else {
          // New appointment
          appointments.push({
            date: appointmentDateInput.value, 
            time: appointmentTimeInput.value, 
            name, email, phone, reason, comments, 
            completed: false
          });
        }
        
        await saveAppointments();
        
        // Submit to Formspree programmatically
        const formData = new FormData(bookingForm);
        
        fetch(bookingForm.action, {
          method: 'POST',
          body: formData,
          headers: {
            'Accept': 'application/json'
          }
        }).then(response => {
          if (response.ok) {
            if (currentEditIndex !== -1) {
              alert("Appointment has been successfully updated!");
            } else {
              alert("New Appointment Booked! We will contact you soon.");
            }
            bookingModal.classList.remove('show');
            renderMonthCalendar(currentDate, calendarBody, currentMonthYearEl);
            currentEditIndex = -1;
          } else {
            throw new Error('Formspree submission failed');
          }
        }).catch(error => {
          console.error('Error submitting to Formspree:', error);
          // Still show success since we saved locally
          if (currentEditIndex !== -1) {
            alert("Appointment has been successfully updated! (Note: Email notification may not have been sent)");
          } else {
            alert("New Appointment Booked! We will contact you soon. (Note: Email notification may not have been sent)");
          }
          bookingModal.classList.remove('show');
          renderMonthCalendar(currentDate, calendarBody, currentMonthYearEl);
          currentEditIndex = -1;
        });
        
      } catch (error) {
        console.error("Error saving appointment locally:", error);
        alert("There was an error saving your appointment. Please try again.");
      }
    });

    // Contact form handling
    if (contactForm) {
      contactForm.addEventListener('submit', function(e) {
        // Set the reply-to email before submission
        if (contactEmail && replyToEmail) {
          replyToEmail.value = contactEmail.value;
        }
        console.log('Contact form submitted to Formspree');
        // Formspree will handle the actual submission
      });
    }

    // ---------------------------
    // EVENT AND TASK EDITING FUNCTIONALITY
    // ---------------------------
    function showEditEventModal(index) {
      const event = events[index];
      eventDateInput.value = event.date;
      eventText.value = event.reason;
      eventModalTitle.textContent = 'Edit Event';
      eventSubmitBtn.textContent = 'Update Event';
      currentEditIndex = index;
      currentEditType = 'events';
      eventModal.classList.add('show');
    }

    function showEditTaskModal(index) {
      const task = tasks[index];
      taskDateInput.value = task.date;
      taskTextSelect.value = task.text;
      taskModalTitle.textContent = 'Edit Task';
      taskSubmitBtn.textContent = 'Update Task';
      currentEditIndex = index;
      currentEditType = 'tasks';
      taskModal.classList.add('show');
    }

    addEventForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      const date = eventDateInput.value;
      const reason = eventText.value;

      if (date && reason) {
        if (currentEditIndex !== -1 && currentEditType === 'events') {
          events[currentEditIndex] = { date, reason, completed: events[currentEditIndex].completed };
        } else {
          events.push({ date, reason, completed: false });
        }
        await saveEvents();
        eventModal.classList.remove('show');
        renderMonthCalendar(currentDate, calendarBody, currentMonthYearEl);
        renderMonthCalendar(backDate, backCalendarBody, backCurrentMonthYear, true);
        alert(currentEditIndex !== -1 ? "Event has been updated!" : "Event has been added!");
        hideAllLists();
        currentEditIndex = -1;
        currentEditType = '';
      }
    });

    addTaskForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      const taskText = taskTextSelect.value;
      const date = taskDateInput.value;

      if (taskText && date) {
        if (currentEditIndex !== -1 && currentEditType === 'tasks') {
          tasks[currentEditIndex] = { text: taskText, date, completed: tasks[currentEditIndex].completed };
        } else {
          tasks.push({ text: taskText, date, completed: false });
        }
        await saveTasks();
        taskModal.classList.remove('show');
        renderMonthCalendar(currentDate, calendarBody, currentMonthYearEl);
        renderMonthCalendar(backDate, backCalendarBody, backCurrentMonthYear, true);
        alert(currentEditIndex !== -1 ? "Task has been updated!" : "Task has been added!");
        hideAllLists();
        currentEditIndex = -1;
        currentEditType = '';
      }
    });

    // ---------------------------
    // RENDERING FUNCTIONS FOR LISTS
    // ---------------------------
    function renderAppointments() {
      appointmentsList.innerHTML = '';
      if (appointments.length === 0) {
        appointmentsList.innerHTML = '<li>No appointments.</li>';
        return;
      }
      appointments.forEach((app, index) => {
        const li = document.createElement('li');
        li.classList.add('blocked-day-item');
        li.innerHTML = `
          <span>${app.date} ${app.time ? 'at ' + app.time : ''} - ${app.reason} (${app.name}) ${app.completed ? ' ✅' : ''}</span>
          <select onchange="handleAction(this.value, 'appointments', ${index})">
            <option value="">Actions</option>
            <option value="complete">Complete</option>
            <option value="edit">Edit</option>
            <option value="delete">Delete</option>
          </select>
        `;
        appointmentsList.appendChild(li);
      });
    }

    function renderEvents() {
      eventsList.innerHTML = '';
      if (events.length === 0) {
        eventsList.innerHTML = '<li>No events.</li>';
        return;
      }
      events.forEach((event, index) => {
        const li = document.createElement('li');
        li.classList.add('blocked-day-item');
        li.innerHTML = `
          <span>${event.date} - ${event.reason} ${event.completed ? ' ✅' : ''}</span>
          <select onchange="handleAction(this.value, 'events', ${index})">
            <option value="">Actions</option>
            <option value="complete">Complete</option>
            <option value="edit">Edit</option>
            <option value="delete">Delete</option>
          </select>
        `;
        eventsList.appendChild(li);
      });
    }

    function renderTasks() {
      tasksList.innerHTML = '';
      if (tasks.length === 0) {
        tasksList.innerHTML = '<li>No tasks.</li>';
        return;
      }
      tasks.forEach((task, index) => {
        const li = document.createElement('li');
        li.classList.add('blocked-day-item');
        li.innerHTML = `
          <span>${task.date} - ${task.text} ${task.completed ? ' ✅' : ''}</span>
          <select onchange="handleAction(this.value, 'tasks', ${index})">
            <option value="">Actions</option>
            <option value="complete">Complete</option>
            <option value="edit">Edit</option>
            <option value="delete">Delete</option>
          </select>
        `;
        tasksList.appendChild(li);
      });
    }

    function renderBlockedDays() {
      blockedDaysList.innerHTML = '';
      if (blockedDays.length === 0) {
        blockedDaysList.innerHTML = '<li>No days are currently blocked.</li>';
        return;
      }
      blockedDays.forEach((day, index) => {
        const li = document.createElement('li');
        li.classList.add('blocked-day-item');
        li.innerHTML = `
          <span>${day.date} - ${day.reason}</span>
          <button onclick="unblockDay(${index})">Remove</button>
        `;
        blockedDaysList.appendChild(li);
      });
    }

    // ---------------------------
    // ACTION HANDLERS
    // ---------------------------
    window.unblockDay = async function(index) {
      blockedDays.splice(index, 1);
      await saveBlockedDays();
      renderBlockedDays();
      renderMonthCalendar(currentDate, calendarBody, currentMonthYearEl);
      renderMonthCalendar(backDate, backCalendarBody, backCurrentMonthYear, true);
    };

    window.handleAction = function(action, type, index) {
      if (action === 'delete') {
        if (confirm(`Are you sure you want to delete this ${type.slice(0, -1)}?`)) {
          if (type === 'appointments') appointments.splice(index, 1);
          if (type === 'events') events.splice(index, 1);
          if (type === 'tasks') tasks.splice(index, 1);
          hideAllLists();
        }
      } else if (action === 'complete') {
        if (type === 'appointments') appointments[index].completed = true;
        if (type === 'events') events[index].completed = true;
        if (type === 'tasks') tasks[index].completed = true;
        hideAllLists();
      } else if (action === 'edit') {
        if (type === 'appointments') {
          showBookingModal(appointments[index].date, index);
        } else if (type === 'events') {
          showEditEventModal(index);
        } else if (type === 'tasks') {
          showEditTaskModal(index);
        }
      }
      
      if (type === 'appointments') renderAppointments();
      if (type === 'events') renderEvents();
      if (type === 'tasks') renderTasks();
    };

    // ---------------------------
    // HELPER FUNCTIONS
    // ---------------------------
    function hideAllLists() {
      appointmentsList.style.display = 'none';
      eventsList.style.display = 'none';
      tasksList.style.display = 'none';
      blockedDaysList.style.display = 'none';
      saveAllContainer.style.display = 'none';
    }

    async function saveAllData() {
      try {
        await saveBlockedDays();
        await saveAppointments();
        await saveEvents();
        await saveTasks();
        alert("All changes have been permanently saved!");
      } catch (error) {
        console.error("Error saving all data:", error);
        alert("Data saved locally, but there was an issue with cloud storage.");
      }
    }

    function startFrontendEmojiAnimation() {
      const emojis = ['🧩', '🎯', '📝', '🗓️', '🔒', '⏰', '🔓', '💡', '⭐', '❤️'];
      let emojiIndex = 0;

      setInterval(() => {
        if (animatedEmoji) {
          animatedEmoji.textContent = emojis[emojiIndex];
          animatedEmoji.style.animation = 'none'; 
          animatedEmoji.offsetHeight; 
          animatedEmoji.style.animation = null; 
          emojiIndex = (emojiIndex + 1) % emojis.length;
        }
      }, 2000);
    }

    // ---------------------------
    // EVENT LISTENER INITIALIZATION
    // ---------------------------
    document.addEventListener('DOMContentLoaded', function() {
      console.log("DOM loaded, initializing calendar...");
      loadAllData();
      
      // Calendar navigation
      prevBtn.addEventListener('click', () => {
        currentDate.setMonth(currentDate.getMonth() - 1);
        renderMonthCalendar(currentDate, calendarBody, currentMonthYearEl);
      });

      nextBtn.addEventListener('click', () => {
        currentDate.setMonth(currentDate.getMonth() + 1);
        renderMonthCalendar(currentDate, calendarBody, currentMonthYearEl);
      });

      prevBackBtn.addEventListener('click', () => {
        backDate.setMonth(backDate.getMonth() - 1);
        renderMonthCalendar(backDate, backCalendarBody, backCurrentMonthYear, true);
      });

      nextBackBtn.addEventListener('click', () => {
        backDate.setMonth(backDate.getMonth() + 1);
        renderMonthCalendar(backDate, backCalendarBody, backCurrentMonthYear, true);
      });

      // Admin login
      adminLoginBtn.addEventListener('click', function() {
        console.log("Admin login button clicked");
        adminModal.classList.add('show');
        adminPwd.value = '';
        adminLoginMsg.style.display = 'none';
      });

      loginForm.addEventListener('submit', handleLogin);

      closeAdminModal.addEventListener('click', function() {
        adminModal.classList.remove('show');
      });

      // Back office navigation
      goBackBtn.addEventListener('click', function() {
        backOfficeSection.style.display = 'none';
        mainPage.style.display = 'flex';
        renderMonthCalendar(currentDate, calendarBody, currentMonthYearEl);
      });

      // Block functionality
      blockDaysBtn.addEventListener('click', function() {
        hideAllLists();
        blockModal.classList.add('show');
      });
      
      unblockDaysBtn.addEventListener('click', function() {
        hideAllLists();
        blockedDaysList.style.display = 'block';
        saveAllContainer.style.display = 'flex';
        renderBlockedDays();
      });
      
      closeBlockModal.addEventListener('click', function() {
        blockModal.classList.remove('show');
      });

      isAllDayCheckbox.addEventListener('change', function() {
        timeRangeContainer.style.display = this.checked ? 'none' : 'block';
      });

      addBlockBtn.addEventListener('click', async function() {
        const date = blockDateInput.value;
        const reason = blockReasonInput.value || 'Blocked';
        const isAllDay = isAllDayCheckbox.checked;

        if (date) {
          if (!isAllDay) {
            const startTime = blockStartTimeInput.value;
            const endTime = blockEndTimeInput.value;
            if (startTime && endTime) {
              blockedDays.push({ date, reason: `${reason} (${startTime}-${endTime})`, startTime, endTime, isAllDay: false });
            } else {
              alert('Please select a start and end time.');
              return;
            }
          } else {
            blockedDays.push({ date, reason: `${reason} (All Day)`, isAllDay: true });
          }
          
          await saveBlockedDays();
          
          renderMonthCalendar(currentDate, calendarBody, currentMonthYearEl);
          renderMonthCalendar(backDate, backCalendarBody, backCurrentMonthYear, true);
          blockModal.classList.remove('show');
          alert("Day/Hours have been permanently blocked!");
        }
      });

      // Event functionality
      addEventsBtn.addEventListener('click', function() {
        hideAllLists();
        eventModalTitle.textContent = 'Add New Event';
        eventSubmitBtn.textContent = 'Add Event';
        currentEditIndex = -1;
        currentEditType = '';
        eventDateInput.value = '';
        eventText.value = '';
        eventModal.classList.add('show');
      });

      closeEventModal.addEventListener('click', function() {
        eventModal.classList.remove('show');
      });

      // Task functionality
      addTasksBtn.addEventListener('click', function() {
        hideAllLists();
        taskModalTitle.textContent = 'Add New Task';
        taskSubmitBtn.textContent = 'Add Task';
        currentEditIndex = -1;
        currentEditType = '';
        taskDateInput.value = '';
        taskTextSelect.value = '';
        taskModal.classList.add('show');
      });

      closeTaskModal.addEventListener('click', function() {
        taskModal.classList.remove('show');
      });

      // View buttons
      viewAppointmentsBtn.addEventListener('click', () => {
        hideAllLists();
        appointmentsList.style.display = 'block';
        saveAllContainer.style.display = 'flex';
        renderAppointments();
      });

      viewEventsBtn.addEventListener('click', () => {
        hideAllLists();
        eventsList.style.display = 'block';
        saveAllContainer.style.display = 'flex';
        renderEvents();
      });

      viewTasksBtn.addEventListener('click', () => {
        hideAllLists();
        tasksList.style.display = 'block';
        saveAllContainer.style.display = 'flex';
        renderTasks();
      });

      // Save all button
      saveAllBtn.addEventListener('click', async function() {
        await saveAllData();
        renderMonthCalendar(currentDate, calendarBody, currentMonthYearEl);
        renderMonthCalendar(backDate, backCalendarBody, backCurrentMonthYear, true);
        hideAllLists();
      });

      exitDetailsBtn.addEventListener('click', function() {
        hideAllLists();
      });

      // Modal background close
      Array.from(document.querySelectorAll('.modal')).forEach(function(modal) {
        modal.addEventListener('click', function(e) {
          if (e.target === modal) modal.classList.remove("show");
        });
      });

      // Escape key to close modals
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
          document.querySelectorAll('.modal').forEach(modal => modal.classList.remove("show"));
        }
      });

      // Other reason dropdown
      bookingReasonSelect.addEventListener('change', (e) => {
        if (e.target.value === 'other') {
          otherReasonContainer.style.display = 'block';
          otherReasonText.setAttribute('required', 'required');
        } else {
          otherReasonContainer.style.display = 'none';
          otherReasonText.removeAttribute('required');
        }
      });

      closeBookingModal.addEventListener('click', () => {
        bookingModal.classList.remove('show');
        currentEditIndex = -1;
      });

      // Start animations
      startFrontendEmojiAnimation();
      
      console.log("Calendar and admin login initialized successfully!");
    });

  </script>
</body>
</html>
