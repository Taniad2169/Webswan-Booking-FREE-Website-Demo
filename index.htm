<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>The Web Swan Calendar</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://fonts.googleapis.com/css?family=Pacifico&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
  <style>
    /* Full-screen calendar container */
    .calendar-container {
      width: 100vw;
      height: 100vh;
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      display: flex;
      justify-content: center;
      align-items: center;
    }
    
    /* Calendar element fills container */
    #calendar {
      width: 100%;
      height: 100%;
      max-width: 100%;
      max-height: 100%;
      padding: 10px;
    }

    /* Responsive adjustments for small devices */
    @media (max-width: 768px) {
      #calendar {
        font-size: 16px;
      }
    }

    /* Optional: make arrows/buttons larger for mobile usability */
    .calendar-nav {
      font-size: 1.5em;
    }

    /* ------------------------------------- */
    /* THEWEBSWANCALENDAR.html original styles */
    /* ------------------------------------- */
    html, body {
      height: 100%;
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      background: #f0f4f8;
      font-family: Arial, sans-serif;
    }
    body {
      min-height: 100vh;
      width: 100vw;
      box-sizing: border-box;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    .main-page {
      display: flex;
      flex-direction: column;
      align-items: center;
      width: 100%;
      min-height: 100vh;
    }
    .container {
      width: 100%;
      min-height: 100vh;
      background: #fff;
      border-radius: 0;
      box-shadow: none;
      padding: 0;
      position: relative;
      overflow: visible;
      margin: 0;
      display: flex;
      flex-direction: column;
      align-items: center;
      max-width: 600px;
    }
    .webswan-header {
      background: #07b5c2;
      min-height: 130px;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 22px 0px 14px 0px;
      box-sizing: border-box;
      border-radius: 0;
      width: 100%;
      max-width: 600px;
      margin: 0;
    }
    .webswan-header-text {
      display: flex;
      flex-direction: column;
      justify-content: center;
      color: #fff;
      font-family: 'Pacifico', cursive;
      width: 100%;
      padding: 0 0 0 0;
      box-sizing: border-box;
      align-items: center;
      position: relative;
    }
    .webswan-title {
      font-family: 'Pacifico', cursive;
      font-size: 2.3em;
      font-weight: normal;
      letter-spacing: 1px;
      margin-bottom: 0px;
      margin-top: 0px;
      color: #fff;
      text-shadow: 0 2px 6px rgba(0,0,0,0.12);
      text-align: center;
      width: 100%;
    }
    .webswan-subtitle {
      font-family: 'Pacifico', cursive;
      font-size: 1.15em;
      color: #fff;
      font-weight: normal;
      letter-spacing: 0.3px;
      margin: 0;
      display: flex;
      align-items: center;
      text-shadow: 0 1px 4px rgba(0,0,0,0.10);
      justify-content: center;
      width: 100%;
      text-align: center;
    }
    .webswan-subtitle .puzzle {
      font-size: 1.2em;
      margin: 0 6px;
      vertical-align: middle;
    }
    .main-content {
      padding: 0;
      width: 100%;
      flex: 1 1 auto;
      display: flex;
      flex-direction: column;
      align-items: center;
      background: #fff;
    }
    header .calendar-actions {
      display: flex;
      flex-direction: row;
      justify-content: center;
      gap: 10px;
      margin-bottom: 12px;
      margin-top: 12px;
      width: 100%;
      padding: 0 10px;
      box-sizing: border-box;
    }
    button {
      background: #2290ab;
      color: #fff;
      border: none;
      padding: 8px 18px;
      border-radius: 4px;
      cursor: pointer;
      font-weight: bold;
      transition: background 0.2s;
      font-size: 1em;
    }
    button:hover {
      background: #126981;
    }
    .calendar-header {
      width: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      margin-bottom: 8px;
      gap: 8px;
      padding: 0 10px;
      box-sizing: border-box;
    }
    .calendar-header button {
      padding: 4px 12px;
      margin: 0;
    }
    .calendar-wrap {
      width: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      margin: 0;
      padding: 0;
    }
    .calendar {
      width: 100%;
      border-collapse: collapse;
      margin: 0;
      font-size: 1.15em;
      border: 4px solid #2290ab;
      box-sizing: border-box;
      background: #fff;
    }
    .calendar th, .calendar td {
      width: 14.28%;
      min-width: 36px;
      height: 44px;
      text-align: center;
      border: 1px solid #ecf0f1;
      font-size: 1.35em;
      font-weight: bold;
      color: #1a1a1a;
      letter-spacing: 1px;
      background: #fff;
      vertical-align: middle;
      transition: background 0.2s;
    }
    .calendar th {
      background: #fff;
      color: #2c3e50;
      font-weight: bold;
      font-size: 1.18em;
    }
    .calendar td {
      cursor: pointer;
      font-size: 1.35em;
      font-weight: bold;
      color: #1a1a1a;
      background: #fff;
      position: relative;
    }
    .calendar td.past {
      color: #bbb !important;
      cursor: not-allowed !important;
      background: #f6f6f6 !important;
      pointer-events: none;
    }
    .calendar td.booked {
      background: #e74c3c;
      color: #fff;
    }
    .calendar td.blocked {
      background: #7f8c8d;
      color: #fff;
    }
    .calendar td:hover:not(.past) {
      background: #d0eaf9;
    }
    .booked-time {
      font-size: 0.7em;
      padding: 2px 4px;
      border-radius: 3px;
      margin-top: 3px;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      background: #d4edda;
      color: #155724;
      border: 1px solid #c3e6cb;
      font-weight: normal;
    }

    /* Modals for Booking, etc. from THEWEBSWANCALENDAR.html */
    .modal {
      display: none;
      position: fixed;
      z-index: 1001;
      left: 0;
      top: 0;
      width: 100vw;
      height: 100vh;
      background: rgba(44,62,80,0.2);
      align-items: center;
      justify-content: center;
      box-sizing: border-box;
    }
    .modal.show { display: flex !important; }
    .modal-content {
      background: #fff;
      padding: 32px 22px 20px 22px;
      border-radius: 8px;
      position: relative;
      max-width: 370px;
      min-width: 240px;
      width: 92vw;
      margin: 0 auto;
      display: flex;
      flex-direction: column;
      align-items: stretch;
      box-shadow: 0 3px 18px rgba(44,62,80,0.13);
      border: 2px solid #2290ab;
      max-height: 95vh;
      overflow-y: auto;
    }
    .modal-content h3 {
      color: #2290ab;
      text-align: center;
      margin-bottom: 19px;
      font-family: 'Pacifico', cursive;
      font-size: 1.2em;
      font-weight: normal;
    }
    .modal-content label {
      font-weight: 600;
      color: #2290ab;
      margin-bottom: 3px;
      font-size: 1em;
      text-align: left;
      margin-top: 6px;
    }
    .modal-content input,
    .modal-content select {
      width: 100%;
      padding: 8px 10px;
      font-size: 1em;
      border-radius: 4px;
      border: 1px solid #bdc3c7;
      margin-bottom: 8px;
      font-family: inherit;
      box-sizing: border-box;
    }
    .modal-content button[type="submit"] {
      margin-top: 10px;
      background: #2290ab;
      color: #fff;
      border: none;
      padding: 9px 0;
      border-radius: 4px;
      cursor: pointer;
      font-weight: bold;
      font-size: 1em;
      width: 100%;
      box-sizing: border-box;
    }
    .close-modal {
      position: absolute;
      top: 10px; right: 16px;
      font-size: 26px;
      cursor: pointer;
      color: #2290ab;
      font-weight: bold;
      background: none;
      border: none;
    }
    @media (max-width: 900px) {
      .container, .calendar, .calendar-wrap, .main-content, .webswan-header, .webswan-header-text, .webswan-title, .webswan-subtitle { max-width: 100vw !important; }
      .calendar th, .calendar td { font-size: 1.18em; }
    }
    @media (max-width: 700px) {
      .container, .calendar, .calendar-wrap, .main-content, .webswan-header, .webswan-header-text, .webswan-title, .webswan-subtitle { max-width: 100vw !important; }
      .calendar th, .calendar td { font-size: 1.13em; }
    }
    .calendar-footer {
      margin: 24px auto 0 auto;
      max-width: 430px;
      text-align: center;
      box-sizing: border-box;
      width: 95vw;
    }
    .contact-section {
      margin: 0 auto 10px auto;
      max-width: 420px;
      text-align: center;
      padding: 14px 10px 14px 10px;
      background: #f3f9fc;
      border-radius: 8px;
      box-sizing: border-box;
      box-shadow: 0 2px 10px rgba(0,0,0,0.07);
    }
    .contact-section .form-title {
      font-family: 'Pacifico', cursive;
      color: #07b5c2;
      margin-bottom: 12px;
      font-size: 2em;
      font-weight: normal;
    }
    .contact-section label {
      display: block;
      font-weight: 600;
      margin-top: 10px;
      margin-bottom: 4px;
      font-size: 1em;
      text-align: left;
    }
    .contact-section input, .contact-section textarea {
      width: 100%;
      max-width: 400px;
      box-sizing: border-box;
      margin-bottom: 10px;
      padding: 8px 10px;
      font-size: 1em;
      border-radius: 4px;
      border: 1px solid #bdc3c7;
      display: block;
      font-family: inherit;
    }
    .contact-section button[type="submit"] {
      margin-top: 8px;
      width: 100%;
      max-width: 180px;
      background: #07b5c2;
      color: #fff;
    }
    .contact-section button[type="submit"]:hover {
      background: #2290ab;
    }
    .contact-section .form-instructions {
      font-size: 1.07em;
      color: #07b5c2;
      margin-bottom: 16px;
      margin-top: 0;
      font-family: 'Segoe UI', Arial, sans-serif;
      font-weight: 500;
      text-align: center;
    }
    .calendar-footer .disclaimer {
      font-size: 0.98em;
      color: #333;
      background: #f3f9fc;
      border-radius: 4px;
      padding: 10px 12px;
      margin-bottom: 10px;
      border: 1px solid #dbeaf3;
      line-height: 1.5;
      text-align: center;
      width: 98%;
      box-sizing: border-box;
      margin-top: 20px;
    }

    /* ------------------------------------- */
    /* Personal Calendar back office styles */
    /* ------------------------------------- */
    
    /* New container for the back office to match the calendar's size */
    .back-office-container {
        width: 100%;
        max-width: 600px;
        border: 4px solid #2290ab;
        background: #fff;
        box-sizing: border-box;
        margin: 20px auto;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .personal-calendar-header {
      background: #07b5c2;
      color: #fff;
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 20px;
      font-family: 'Pacifico', cursive;
      font-size: 1.5em;
      position: relative;
    }
    .personal-calendar-header .logo {
      font-size: 1.2em;
    }
    .personal-calendar-main {
      padding: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      width: 100%;
      padding-top: 0;
    }
    .personal-calendar-controls {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 10px;
      margin-bottom: 20px;
      width: 100%;
      max-width: 600px;
      margin-top: 20px;
    }
    .personal-calendar-controls button {
      flex-grow: 1;
      max-width: 180px;
      background: #e6f7ff;
      color: #007bff;
      border: 1px solid #007bff;
    }
    .personal-calendar-controls .block-btn {
      background: #ffcccc;
      color: #dc3545;
      border: 1px solid #dc3545;
    }
    .personal-calendar-controls .unblock-btn {
      background: #d4edda;
      color: #28a745;
      border: 1px solid #28a745;
    }
    .personal-calendar-controls .go-back-btn {
      background: #adb5bd;
      color: #fff;
      border: none;
      width: 100%;
      max-width: 400px;
    }
    .bell-notification {
      position: absolute;
      top: 50%;
      right: 20px;
      transform: translateY(-50%);
      font-size: 1.5em;
      color: #f7b731;
      cursor: pointer;
      transition: transform 0.3s ease-in-out;
    }
    .bell-notification.shake {
      animation: shake 0.8s cubic-bezier(.36, .07, .19, .97) both;
    }
    @keyframes shake {
      10%, 90% { transform: translate3d(-1px, -50%, 0); }
      20%, 80% { transform: translate3d(2px, -50%, 0); }
      30%, 50%, 70% { transform: translate3d(-4px, -50%, 0); }
      40%, 60% { transform: translate3d(4px, -50%, 0); }
    }
    .blocked-day-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 8px;
      border: 1px solid #ddd;
      border-radius: 4px;
      margin-bottom: 5px;
    }
    .blocked-day-item button {
      background: #f44336;
      color: white;
      border: none;
      padding: 5px 10px;
      border-radius: 3px;
      cursor: pointer;
    }
    
    /* Styles for the single, fading emojis */
    .fading-emoji {
      position: absolute;
      font-size: 2.2em;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      animation: pop-and-fade 2s ease-in-out forwards;
      opacity: 0;
      pointer-events: none;
    }
    
    @keyframes pop-and-fade {
      0% {
        opacity: 0;
        transform: translate(-50%, -50%) scale(0.5);
      }
      20% {
        opacity: 1;
        transform: translate(-50%, -50%) scale(1.1);
      }
      80% {
        opacity: 1;
        transform: translate(-50%, -50%) scale(1);
      }
      100% {
        opacity: 0;
        transform: translate(-50%, -50%) scale(0.5);
      }
    }

    /* Styles for booking modal time slots */
    .time-slot {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 8px;
      border: 1px solid #ddd;
      border-radius: 4px;
      margin-bottom: 5px;
      cursor: pointer;
    }
    .time-slot.blocked {
      background: #f8d7da;
      color: #721c24;
      border-color: #f5c6cb;
      cursor: not-allowed;
    }
    .time-slot:not(.blocked):hover {
      background: #e9ecef;
    }
    
    /* New styles for "other" text box */
    #otherReasonContainer {
      display: none;
      margin-top: 10px;
    }
    #bookingForm textarea {
        width: 100%;
        padding: 8px 10px;
        font-size: 1em;
        border-radius: 4px;
        border: 1px solid #bdc3c7;
        margin-bottom: 8px;
        font-family: inherit;
        box-sizing: border-box;
    }

    /* ------------------------------------- */
    /* NEW BANNER STYLES */
    /* ------------------------------------- */
    .back-office-banner {
      background: #07b5c2;
      color: #fff;
      padding: 15px 0;
      text-align: center;
      font-family: 'Pacifico', cursive;
      font-size: 2em;
      position: relative;
      width: 100%;
      box-sizing: border-box;
      overflow: hidden;
      height: 150px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-bottom: 4px solid #fff;
    }

    .back-office-banner .banner-text {
      position: absolute;
      z-index: 1;
    }

    .back-office-banner .animated-emoji {
      position: absolute;
      font-size: 2.5em;
      opacity: 0;
      animation-duration: 3s;
      animation-fill-mode: forwards;
      z-index: 2;
      text-shadow: 0 0 10px rgba(0,0,0,0.5);
    }

    /* New Keyframe Animations for Emojis */
    @keyframes bounce-spin-shake {
      0% {
        opacity: 0;
        transform: translate(-100%, -50%) scale(0.5) rotate(0deg);
      }
      20% {
        opacity: 1;
        transform: translate(-50%, -50%) scale(1.2) rotate(30deg);
      }
      40% {
        transform: translate(-50%, -50%) scale(1) rotate(-20deg);
      }
      60% {
        transform: translate(-50%, -50%) scale(1.1) rotate(10deg);
      }
      80% {
        opacity: 1;
        transform: translate(-50%, -50%) scale(1) rotate(0deg);
      }
      100% {
        opacity: 0;
        transform: translate(100%, -50%) scale(0.8) rotate(0deg);
      }
    }

    .back-office .calendar-header {
        margin-top: 20px;
    }
    
    /* New styles for scrollable container */
    .scrollable-content-container {
        width: 100%;
        max-width: 600px;
        max-height: 50vh;
        overflow-y: auto;
        padding: 0 10px;
        box-sizing: border-box;
    }

    /* New styles for the key button */
    .exit-details-btn {
      background: #5d5d5d;
      color: #fff;
      margin-left: 10px;
    }
    
  </style>
</head>
<body>
  <div id="mainPage" class="main-page">
    <div class="container" id="mainAppContainer">
      <div class="webswan-header">
        <div class="webswan-header-text">
          <div class="webswan-title">The Web Swan</div>
          <div class="webswan-subtitle"> Putting The Pieces Together <span class="puzzle">🧩</span> For Your Long-Term Online Success </div>
          <span id="animatedEmoji" class="fading-emoji"></span>
        </div>
      </div>
      <div class="main-content">
        <header>
          <div class="calendar-actions">
            <button id="adminLoginBtn" type="button">Admin Login</button>
          </div>
          <div class="calendar-header">
            <button id="prevBtn">&lt;</button>
            <span id="currentMonthYear"></span>
            <button id="nextBtn">&gt;</button>
          </div>
        </header>
        <div class="calendar-wrap">
          <table class="calendar" id="calendar">
            <thead>
              <tr>
                <th>Sun</th><th>Mon</th><th>Tue</th><th>Wed</th>
                <th>Thu</th><th>Fri</th><th>Sat</th>
              </tr>
            </thead>
            <tbody id="calendarBody"></tbody>
          </table>
        </div>
      </div>
    </div>
    <footer class="calendar-footer">
      <div class="contact-section">
        <div class="form-instructions"> Not ready for an appointment? Have a question?<br> Fill out the form and <b>I</b> will get back to you <span style="font-size:1.2em;"></span>🎯</div>
        <div class="form-title">Contact Us</div>
        <form id="contactForm" action="https://formspree.io/f/mldwdpgr" method="POST" autocomplete="off">
          <label for="contactInfo">Your phone number or email:</label>
          <input type="text" name="contactInfo" id="contactInfo" required pattern="^(\+?\d{10,15}|[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})$" placeholder="Enter phone number or email" inputmode="email" autocomplete="off" >
          <label for="contactMessage">Your message:</label>
          <textarea name="message" id="contactMessage" rows="5" maxlength="1500" required></textarea>
          <button type="submit">Send</button>
        </form>
      </div>
      <div class="disclaimer"> <strong>Disclaimer:</strong> We collect your information solely to respond to your inquiry and communicate with you. We do not sell or share your information with any third party. <a href="https://www.thewebswan.com/privacy-policy" target="_blank">Click here to view our Privacy Policy</a>. </div>
    </footer>
  </div>

  <!-- Admin Login Modal -->
  <div id="adminModal" class="modal">
    <div class="modal-content" id="loginModalContent">
      <button class="close-modal" id="closeAdminModal">&times;</button>
      <h2>Admin Login</h2>
      <form id="loginForm" autocomplete="off">
        <label for="adminPwd">Password</label>
        <input type="password" id="adminPwd" required autocomplete="off">
        <button type="submit">Login</button>
        <div class="login-error" id="adminLoginMsg" style="display:none; color:red; margin-top:10px;">Incorrect password.</div>
      </form>
    </div>
  </div>

  <!-- Back Office Section -->
  <div id="backOfficeSection" class="back-office" style="display:none; width: 100%;">
    <div class="back-office-container">
      <div class="back-office-banner">
        <div class="banner-text">Personal Calendar</div>
        <span id="backOfficeAnimatedEmoji" class="animated-emoji"></span>
      </div>
      <div class="personal-calendar-main">
        <div class="calendar-header">
          <button id="prevBackBtn">&lt;</button>
          <span id="backCurrentMonthYear"></span>
          <button id="nextBackBtn">&gt;</button>
        </div>
        <div class="calendar-wrap">
          <table class="calendar" id="backCalendar">
            <thead>
              <tr><th>Sun</th><th>Mon</th><th>Tue</th><th>Wed</th><th>Thu</th><th>Fri</th><th>Sat</th></tr>
            </thead>
            <tbody id="backCalendarBody"></tbody>
          </table>
        </div>
        <div class="personal-calendar-controls">
          <button id="viewAppointmentsBtn">Appointments</button>
          <button id="viewEventsBtn">View Events</button>
          <button id="addEventsBtn">Add Event</button>
          <button id="viewTasksBtn">View Tasks</button>
          <button id="addTasksBtn">Add Task</button>
          <button id="unblockDaysBtn" class="unblock-btn">Unblock Day/Hours</button>
          <button id="blockDaysBtn" class="block-btn">Block Day/Hours</button>
          <button id="goBackBtn" style="background:#14395d;color:#fff;">Go Back</button>
        </div>
        <div id="scrollableContentContainer" class="scrollable-content-container">
          <ul id="appointmentsList" style="list-style:none;padding:0; display:none; margin-top: 20px; width: 100%;"></ul>
          <ul id="eventsList" style="list-style:none;padding:0; display:none; margin-top: 20px; width: 100%;"></ul>
          <ul id="tasksList" style="list-style:none;padding:0; display:none; margin-top: 20px; width: 100%;"></ul>
          <ul id="blockedDaysList" style="list-style:none;padding:0; display:none; margin-top: 20px; width: 100%;"></ul>
        </div>
        <div style="display:none; width: 100%; max-width: 600px; text-align: center;" id="saveAllContainer">
          <button id="saveAllBtn" style="margin-top: 20px; width:calc(50% - 10px); max-width: 200px;">Save Changes</button>
          <button id="exitDetailsBtn" class="exit-details-btn" style="margin-top: 20px; width:calc(50% - 10px); max-width: 200px;"><i class="fas fa-key"></i></button>
        </div>
      </div>
    </div>
  </div>

  <!-- Booking Modal -->
  <div id="bookingModal" class="modal">
    <div class="modal-content">
      <button class="close-modal" id="closeBookingModal">&times;</button>
      <h3 id="bookingModalTitle">Book Appointment</h3>
      <div id="bookingDateText" style="margin-bottom:14px;"></div>
      <div id="timeSlotsContainer"></div>
      <div id="bookingFormContainer">
          <form id="bookingForm" action="https://formspree.io/f/mldwdpgr" method="POST" style="display:none;">
            <label for="bookingName">Name:</label>
            <input type="text" id="bookingName" name="Name" required>
            <label for="bookingPhone">Phone:</label>
            <input type="tel" id="bookingPhone" name="Phone" required pattern="^[\+]?[1-9][\d]{0,15}$" title="Please enter a valid phone number">
            <label for="bookingEmail">Email:</label>
            <input type="email" id="bookingEmail" name="Email" required>
            <label for="bookingReason">Reason for Appointment:</label>
            <select id="bookingReason" name="Reason" required>
              <option value="">Select a reason</option>
              <option value="FREE website demo">FREE website demo</option>
              <option value="custom calendar">custom calendar</option>
              <option value="a form">a form</option>
              <option value="reputation management">reputation management</option>
              <option value="an ad campaign video/script">an ad campaign video/script</option>
              <option value="effective SEO">effective SEO</option>
              <option value="collaboration">collaboration</option>
              <option value="a free website analyst">a free website analyst</option>
              <option value="other">Other</option>
            </select>
            <div id="otherReasonContainer">
                <label for="otherReasonText">Please specify:</label>
                <textarea id="otherReasonText" name="Other Reason" rows="3" maxlength="100"></textarea>
            </div>
            <label for="bookingComments">Comments (100 words max):</label>
            <textarea id="bookingComments" name="Comments" rows="5" maxlength="500"></textarea>
            <input type="hidden" name="Date" id="appointmentDateInput">
            <input type="hidden" name="Time" id="appointmentTimeInput">
            <button type="submit">Book</button>
          </form>
      </div>
    </div>
  </div>

  <!-- Block Modal -->
  <div id="blockModal" class="modal">
    <div class="modal-content">
      <button class="close-modal" id="closeBlockModal">&times;</button>
      <h3>Block a Day or Time</h3>
      <label for="blockDate">Select Date:</label>
      <input type="date" id="blockDate">
      <div style="display:flex; justify-content:space-between; margin:10px 0;">
        <label for="isAllDay">All Day Block?</label>
        <input type="checkbox" id="isAllDay">
      </div>
      <label for="blockReason">Reason:</label>
      <input type="text" id="blockReason">
      <div id="timeRangeContainer">
        <label for="blockStartTime">Start Time:</label>
        <input type="time" id="blockStartTime">
        <label for="blockEndTime">End Time:</label>
        <input type="time" id="blockEndTime">
      </div>
      <button id="addBlockBtn" type="submit">Add Block</button>
    </div>
  </div>

  <!-- Event Modal -->
  <div id="eventModal" class="modal">
    <div class="modal-content">
      <button class="close-modal" id="closeEventModal">&times;</button>
      <h3>Add New Event</h3>
      <form id="addEventForm">
        <label for="eventDate">Event Date:</label>
        <input type="date" id="eventDate" required>
        <label for="eventText">Event Description:</label>
        <input type="text" id="eventText" required>
        <button type="submit">Add Event</button>
      </form>
    </div>
  </div>

  <!-- Task Modal -->
  <div id="taskModal" class="modal">
    <div class="modal-content">
      <button class="close-modal" id="closeTaskModal">&times;</button>
      <h3>Add New Task</h3>
      <form id="addTaskForm">
        <label for="taskDate">Task Date:</label>
        <input type="date" id="taskDate" required>
        <label for="taskText">Task Description:</label>
        <select id="taskText" required>
          <option value="">Select a task</option>
          <option value="Call client">Call client</option>
          <option value="Collaborate">Collaborate</option>
          <option value="Zoom meeting">Zoom meeting</option>
          <option value="Phone call">Phone call</option>
          <option value="Send text">Send text</option>
          <option value="Send email">Send email</option>
          <option value="Prepare demo">Prepare demo</option>
          <option value="Work on web design">Work on web design</option>
          <option value="Vacation">Vacation</option>
          <option value="Doctor">Doctor</option>
          <option value="Live networking">Live networking</option>
          <option value="Online networking">Online networking</option>
          <option value="Travel">Travel</option>
          <option value="Party">Party</option>
          <option value="Event">Event</option>
        </select>
        <button type="submit">Add Task</button>
      </form>
    </div>
  </div>

  <!-- Audio element for notification sound -->
  <audio id="notificationSound" preload="auto">
    <source src="data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBDmX3PLCdCwFJ4TO8tKJNwgZbLvt559OEAwQr+DxsF8cBjiRz/LPeCQFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBDmX3PLCdCsEI4XN8tOKOQgYaLvs6JlOEAxQqODwtmMbBzuX2/LDeSQFI4DF8daIOwgWXLPr7KdWEgpCyebyxHkrBD+U2fLHeSsFJIXE8NOKOQgZaLns6Zw=" type="audio/wav">
  </audio>

  <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-app-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-auth-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-analytics-compat.js"></script>
  <script>
    // Firebase config
    const firebaseConfig = {
      apiKey: "AIzaSyB50YiZNBFj0dgwwA9iEHqqvAurQ5HcvD0",
      authDomain: "the-webswan-calendar.firebaseapp.com",
      projectId: "the-webswan-calendar",
      storageBucket: "the-webswan-calendar.firebasestorage.app",
      messagingSenderId: "412434435868",
      appId: "1:412434435868:web:f850dee0d43a406cc634d9",
      measurementId: "G-P3YX9PCV63"
    };

    // Initialize Firebase
    firebase.initializeApp(firebaseConfig);
    firebase.analytics();
    
    // Initialize Firestore
    const db = firebase.firestore();

    // Firebase data functions
    async function saveToFirebase(collection, data) {
        try {
            await db.collection(collection).doc('data').set({ items: data });
            console.log(`${collection} saved to Firebase successfully`);
            playNotificationSound();
        } catch (error) {
            console.error(`Error saving ${collection} to Firebase:`, error);
            localStorage.setItem(collection, JSON.stringify(data));
        }
    }

    async function loadFromFirebase(collection) {
        try {
            const doc = await db.collection(collection).doc('data').get();
            if (doc.exists) {
                return doc.data().items || [];
            } else {
                console.log(`No ${collection} found in Firebase`);
                return [];
            }
        } catch (error) {
            console.error(`Error loading ${collection} from Firebase:`, error);
            const localData = localStorage.getItem(collection);
            return localData ? JSON.parse(localData) : [];
        }
    }

    // Initialize data from Firebase
    async function initializeData() {
        try {
            blockedDays = await loadFromFirebase('blockedDays');
            tasks = await loadFromFirebase('tasks');
            appointments = await loadFromFirebase('appointments');
            events = await loadFromFirebase('events');
            
            console.log('Data loaded from Firebase:', { 
                blockedDays: blockedDays.length,
                tasks: tasks.length, 
                appointments: appointments.length,
                events: events.length 
            });
            
            renderMonthCalendar(currentDate, calendarBody, currentMonthYearEl);
            renderMonthCalendar(backDate, backCalendarBody, backCurrentMonthYear, true);
        } catch (error) {
            console.error('Error initializing data from Firebase:', error);
        }
    }

    // Notification sound function
    function playNotificationSound() {
        const audio = document.getElementById('notificationSound');
        if (audio) {
            audio.play().catch(e => console.log('Could not play notification sound:', e));
        }
    }
    
    // Elements - front calendar
    const calendarBody = document.getElementById('calendarBody');
    const currentMonthYearEl = document.getElementById('currentMonthYear');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const bookingForm = document.getElementById('bookingForm');
    const closeBookingModal = document.getElementById('closeBookingModal');
    const bookingModal = document.getElementById('bookingModal');
    const timeSlotsContainer = document.getElementById('timeSlotsContainer');
    const bookingReasonSelect = document.getElementById('bookingReason');
    const otherReasonContainer = document.getElementById('otherReasonContainer');
    const otherReasonText = document.getElementById('otherReasonText');
    const bookingNameInput = document.getElementById('bookingName');
    const bookingPhoneInput = document.getElementById('bookingPhone');
    const bookingEmailInput = document.getElementById('bookingEmail');
    const bookingCommentsInput = document.getElementById('bookingComments');
    const bookingModalTitle = document.getElementById('bookingModalTitle');
    const appointmentDateInput = document.getElementById('appointmentDateInput');
    const appointmentTimeInput = document.getElementById('appointmentTimeInput');
    const bookingFormContainer = document.getElementById('bookingFormContainer');
    const animatedEmoji = document.getElementById('animatedEmoji');

    // Elements - back office calendar
    const backCalendarBody = document.getElementById('backCalendarBody');
    const backCurrentMonthYear = document.getElementById('backCurrentMonthYear');
    const prevBackBtn = document.getElementById('prevBackBtn');
    const nextBackBtn = document.getElementById('nextBackBtn');
    const backOfficeAnimatedEmoji = document.getElementById('backOfficeAnimatedEmoji');

    // Back office lists & controls
    const appointmentsList = document.getElementById('appointmentsList');
    const eventsList = document.getElementById('eventsList');
    const tasksList = document.getElementById('tasksList');
    const blockedDaysList = document.getElementById('blockedDaysList');
    const saveAllContainer = document.getElementById('saveAllContainer');
    const exitDetailsBtn = document.getElementById('exitDetailsBtn');
    const viewAppointmentsBtn = document.getElementById('viewAppointmentsBtn');
    const viewEventsBtn = document.getElementById('viewEventsBtn');
    const addEventsBtn = document.getElementById('addEventsBtn');
    const viewTasksBtn = document.getElementById('viewTasksBtn');
    const addTasksBtn = document.getElementById('addTasksBtn');
    const unblockDaysBtn = document.getElementById('unblockDaysBtn');
    const goBackBtn = document.getElementById('goBackBtn');
    const saveAllBtn = document.getElementById('saveAllBtn');
    const addBlockBtn = document.getElementById('addBlockBtn');
    const addEventForm = document.getElementById('addEventForm');
    const eventModal = document.getElementById('eventModal');
    const closeEventModal = document.getElementById('closeEventModal');
    const eventDateInput = document.getElementById('eventDate');
    const eventText = document.getElementById('eventText');
    const addTaskForm = document.getElementById('addTaskForm');
    const closeTaskModal = document.getElementById('closeTaskModal');
    const taskModal = document.getElementById('taskModal');
    const taskDateInput = document.getElementById('taskDate');
    const taskTextSelect = document.getElementById('taskText');
    const closeBlockModal = document.getElementById('closeBlockModal');
    const blockModal = document.getElementById('blockModal');
    const blockDateInput = document.getElementById('blockDate');
    const isAllDayCheckbox = document.getElementById('isAllDay');
    const blockReasonInput = document.getElementById('blockReason');
    const timeRangeContainer = document.getElementById('timeRangeContainer');
    const blockStartTimeInput = document.getElementById('blockStartTime');
    const blockEndTimeInput = document.getElementById('blockEndTime');

    // Modal elements and forms
    const adminLoginBtn = document.getElementById('adminLoginBtn');
    const adminModal = document.getElementById('adminModal');
    const closeAdminModal = document.getElementById('closeAdminModal');
    const adminPwd = document.getElementById('adminPwd');
    const adminLoginMsg = document.getElementById('adminLoginMsg');
    const loginForm = document.getElementById('loginForm');
    const backOfficeSection = document.getElementById('backOfficeSection');
    const mainPage = document.getElementById('mainPage');

    // Data - Initialize as empty arrays (will be loaded from Firebase)
    let currentDate = new Date();
    let backDate = new Date();
    let blockedDays = [];
    let tasks = [];
    let appointments = [];
    let events = [];
    let currentBookingDate = '';
    let currentBookingTime = '';

    // Initialize data from Firebase after page loads
    document.addEventListener('DOMContentLoaded', function() {
        initializeData();
        startFrontendEmojiAnimation();
    });

    // Helper: format YYYY-MM-DD
    function formatDate(date) {
      const year = date.getFullYear();
      const month = (date.getMonth() + 1).toString().padStart(2, '0');
      const day = date.getDate().toString().padStart(2, '0');
      return `${year}-${month}-${day}`;
    }
    
    // Generic calendar renderer
    function renderMonthCalendar(date, bodyEl, headerEl, isBackOffice = false) {
      const year = date.getFullYear();
      const month = date.getMonth();
      const firstDay = new Date(year, month, 1);
      const lastDay = new Date(year, month + 1, 0);
      const daysInMonth = lastDay.getDate();
      const startDayOfWeek = firstDay.getDay();

      headerEl.textContent = `${firstDay.toLocaleString('default', { month: 'long' })} ${year}`;
      bodyEl.innerHTML = '';

      let row = document.createElement('tr');
      for (let i = 0; i < startDayOfWeek; i++) {
        const cell = document.createElement('td');
        row.appendChild(cell);
      }

      for (let i = 1; i <= daysInMonth; i++) {
        if (row.children.length === 7) {
          bodyEl.appendChild(row);
          row = document.createElement('tr');
        }

        const cell = document.createElement('td');
        const day = new Date(year, month, i);
        const today = new Date();
        const formattedDate = formatDate(day);

        cell.textContent = i;
        cell.dataset.date = formattedDate;

        if (day < today && formattedDate !== formatDate(today)) {
          cell.classList.add('past');
        }

        const isBlocked = blockedDays.some(b => b.date === formattedDate && b.isAllDay);
        if (isBlocked) {
          cell.classList.add('blocked');
        }
        
        cell.onclick = (e) => {
          if (!isBackOffice && !cell.classList.contains('past') && !cell.classList.contains('blocked')) {
            showBookingModal(formattedDate);
          }
        };

        row.appendChild(cell);
      }

      while (row.children.length < 7) {
        const cell = document.createElement('td');
        row.appendChild(cell);
      }
      bodyEl.appendChild(row);
    }
    
    // Render both calendars initially
    renderMonthCalendar(currentDate, calendarBody, currentMonthYearEl);
    renderMonthCalendar(backDate, backCalendarBody, backCurrentMonthYear, true);

    // Front calendar nav
    prevBtn.addEventListener('click', () => {
      currentDate.setMonth(currentDate.getMonth() - 1);
      renderMonthCalendar(currentDate, calendarBody, currentMonthYearEl);
    });

    nextBtn.addEventListener('click', () => {
      currentDate.setMonth(currentDate.getMonth() + 1);
      renderMonthCalendar(currentDate, calendarBody, currentMonthYearEl);
    });

    // Back calendar nav
    prevBackBtn.addEventListener('click', () => {
      backDate.setMonth(backDate.getMonth() - 1);
      renderMonthCalendar(backDate, backCalendarBody, backCurrentMonthYear, true);
    });
    nextBackBtn.addEventListener('click', () => {
      backDate.setMonth(backDate.getMonth() + 1);
      renderMonthCalendar(backDate, backCalendarBody, backCurrentMonthYear, true);
    });

    // Booking modal showing and form submission
    function showBookingModal(date, appointmentIndex = -1) {
        currentBookingDate = date;
        bookingForm.dataset.editIndex = appointmentIndex;
        
        document.getElementById('bookingDateText').textContent = `Booking for: ${date}`;
        bookingNameInput.value = '';
        bookingPhoneInput.value = '';
        bookingEmailInput.value = '';
        bookingCommentsInput.value = '';
        bookingReasonSelect.value = '';
        otherReasonText.value = '';
        otherReasonContainer.style.display = 'none';

        if (appointmentIndex !== -1) {
            const appointment = appointments[appointmentIndex];
            bookingModalTitle.textContent = 'Edit Appointment';
            document.getElementById('bookingDateText').textContent = `Edit appointment for: ${appointment.date}`;
            
            const dateInput = document.createElement('input');
            dateInput.type = 'date';
            dateInput.id = 'editAppointmentDate';
            dateInput.value = appointment.date;
            dateInput.style.marginBottom = '10px';
            document.getElementById('bookingDateText').parentNode.insertBefore(dateInput, document.getElementById('bookingDateText').nextSibling);
            
            bookingNameInput.value = appointment.name;
            bookingPhoneInput.value = appointment.phone;
            bookingEmailInput.value = appointment.email || '';
            bookingCommentsInput.value = appointment.comments || '';

            const reasonInOptions = Array.from(bookingReasonSelect.options).some(o => o.value === appointment.reason);
            if (reasonInOptions) {
                bookingReasonSelect.value = appointment.reason;
            } else {
                bookingReasonSelect.value = 'other';
                otherReasonContainer.style.display = 'block';
                otherReasonText.value = appointment.reason;
            }
            
            timeSlotsContainer.style.display = 'none';
            bookingForm.style.display = 'block';
        } else {
            bookingModalTitle.textContent = 'Book Appointment';
            if(document.getElementById('editAppointmentDate')) {
                document.getElementById('editAppointmentDate').remove();
            }
            timeSlotsContainer.innerHTML = '';
            timeSlotsContainer.style.display = 'block';
            bookingForm.style.display = 'none';
    
            const startTime = 9; // 9 AM
            const endTime = 17; // 5 PM
            const timeInterval = 30; // 30 minutes
    
            const dateBlocked = blockedDays.some(b => b.date === date && b.isAllDay);
            if (dateBlocked) {
                timeSlotsContainer.innerHTML = 'All day is blocked.';
                return;
            }
    
            const hoursBlocked = blockedDays.filter(b => b.date === date && !b.isAllDay);
    
            for (let h = startTime; h <= endTime; h++) {
                for (let m = 0; m < 60; m += timeInterval) {
                    const time = `${h.toString().padStart(2, '0')}:${m.toString().padStart(2, '0')}`;
                    
                    const isTimeBlocked = hoursBlocked.some(b => {
                        const start = b.startTime;
                        const end = b.endTime;
                        return time >= start && time < end;
                    });
                    
                    const timeSlotEl = document.createElement('div');
                    timeSlotEl.className = `time-slot ${isTimeBlocked ? 'blocked' : ''}`;
                    timeSlotEl.textContent = time;
                    timeSlotEl.dataset.time = time;
                    
                    if (!isTimeBlocked) {
                        timeSlotEl.addEventListener('click', () => {
                            currentBookingTime = time;
                            playNotificationSound();
                            alert(`You have selected an appointment for ${date} at ${time}. Please fill out the form.`);
                            document.getElementById('bookingForm').style.display = 'block';
                            appointmentDateInput.value = date;
                            appointmentTimeInput.value = time;
                            timeSlotsContainer.style.display = 'none';
                            bookingFormContainer.scrollIntoView({ behavior: 'smooth' });
                        });
                    }
                    
                    timeSlotsContainer.appendChild(timeSlotEl);
                }
            }
        }

        bookingModal.classList.add('show');
    }
    
    bookingReasonSelect.addEventListener('change', (e) => {
        if (e.target.value === 'other') {
            otherReasonContainer.style.display = 'block';
            otherReasonText.setAttribute('required', 'required');
        } else {
            otherReasonContainer.style.display = 'none';
            otherReasonText.removeAttribute('required');
        }
    });

    closeBookingModal.addEventListener('click', () => {
        bookingModal.classList.remove('show');
        if(document.getElementById('editAppointmentDate')) {
            document.getElementById('editAppointmentDate').remove();
        }
    });
    
    bookingForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const editIndex = bookingForm.dataset.editIndex;
        let bookingDate;
        let bookingTime;
        if(editIndex !== "-1") {
            bookingDate = document.getElementById('editAppointmentDate').value;
            bookingTime = appointments[editIndex].time;
        } else {
            bookingDate = appointmentDateInput.value;
            bookingTime = appointmentTimeInput.value;
        }

        const name = bookingNameInput.value;
        const phone = bookingPhoneInput.value;
        const email = bookingEmailInput.value;
        const comments = bookingCommentsInput.value;
        let reason = bookingReasonSelect.value;
        
        if (reason === 'other') {
            reason = otherReasonText.value;
        }

        if (editIndex !== "-1") {
            appointments[editIndex] = { date: bookingDate, time: bookingTime, name, phone, email, reason, comments, completed: appointments[editIndex].completed };
            alert("Appointment has been successfully updated!");
        } else {
            appointments.push({date: bookingDate, time: bookingTime, name, phone, email, reason, comments, completed: false});
            alert("New Appointment Booked! We will contact you soon.");
        }
        
        await saveToFirebase('appointments', appointments);

        bookingModal.classList.remove('show');
        renderMonthCalendar(currentDate, calendarBody, currentMonthYearEl);
    });

    // Helper function to hide all lists and content container
    function hideAllLists() {
      appointmentsList.style.display = 'none';
      eventsList.style.display = 'none';
      tasksList.style.display = 'none';
      blockedDaysList.style.display = 'none';
      saveAllContainer.style.display = 'none';
    }

    // Render lists with new dropdown functionality
    function renderAppointments() {
      appointmentsList.innerHTML = '';
      if (appointments.length === 0) {
        appointmentsList.innerHTML = '<li>No appointments.</li>';
        return;
      }
      appointments.forEach((app, index) => {
        const li = document.createElement('li');
        li.classList.add('blocked-day-item');
        li.innerHTML = `
          <span>${app.date} - ${app.reason} (${app.name}) ${app.completed ? ' ✅' : ''}</span>
          <select onchange="handleAction(this.value, 'appointments', ${index})">
            <option value="">Actions</option>
            <option value="complete">Complete</option>
            <option value="edit">Edit</option>
            <option value="delete">Delete</option>
          </select>
        `;
        appointmentsList.appendChild(li);
      });
    }

    function renderEvents() {
      eventsList.innerHTML = '';
      if (events.length === 0) {
        eventsList.innerHTML = '<li>No events.</li>';
        return;
      }
      events.forEach((event, index) => {
        const li = document.createElement('li');
        li.classList.add('blocked-day-item');
        li.innerHTML = `
          <span>${event.date} - ${event.reason} ${event.completed ? ' ✅' : ''}</span>
          <select onchange="handleAction(this.value, 'events', ${index})">
            <option value="">Actions</option>
            <option value="complete">Complete</option>
            <option value="edit">Edit</option>
            <option value="delete">Delete</option>
          </select>
        `;
        eventsList.appendChild(li);
      });
    }
    
    function renderTasks() {
      tasksList.innerHTML = '';
      if (tasks.length === 0) {
        tasksList.innerHTML = '<li>No tasks.</li>';
        return;
      }
      tasks.forEach((task, index) => {
        const li = document.createElement('li');
        li.classList.add('blocked-day-item');
        li.innerHTML = `
          <span>${task.date} - ${task.text} ${task.completed ? ' ✅' : ''}</span>
          <select onchange="handleAction(this.value, 'tasks', ${index})">
            <option value="">Actions</option>
            <option value="complete">Complete</option>
            <option value="edit">Edit</option>
            <option value="delete">Delete</option>
          </select>
        `;
        tasksList.appendChild(li);
      });
    }

    function renderBlockedDays() {
      blockedDaysList.innerHTML = '';
      if (blockedDays.length === 0) {
        blockedDaysList.innerHTML = '<li>No days are currently blocked.</li>';
        return;
      }
      blockedDays.forEach((day, index) => {
        const li = document.createElement('li');
        li.classList.add('blocked-day-item');
        li.innerHTML = `
          <span>${day.date} - ${day.reason}</span>
          <button onclick="unblockDay(${index})">Remove</button>
        `;
        blockedDaysList.appendChild(li);
      });
    }

    window.unblockDay = async function(index) {
      blockedDays.splice(index, 1);
      await saveToFirebase('blockedDays', blockedDays);
      renderBlockedDays();
      renderMonthCalendar(currentDate, calendarBody, currentMonthYearEl);
      renderMonthCalendar(backDate, backCalendarBody, backCurrentMonthYear, true);
    };

    window.handleAction = function(action, type, index) {
      if (action === 'delete') {
        if (confirm(`Are you sure you want to delete this ${type.slice(0, -1)}?`)) {
          if (type === 'appointments') appointments.splice(index, 1);
          if (type === 'events') events.splice(index, 1);
          if (type === 'tasks') tasks.splice(index, 1);
          hideAllLists();
        }
      } else if (action === 'complete') {
        if (type === 'appointments') appointments[index].completed = true;
        if (type === 'events') events[index].completed = true;
        if (type === 'tasks') tasks[index].completed = true;
        hideAllLists();
      } else if (action === 'edit') {
        if (type === 'appointments') {
            showBookingModal(appointments[index].date, index);
        }
        if (type === 'events') {
            const eventToEdit = events[index];
            eventDateInput.value = eventToEdit.date;
            eventText.value = eventToEdit.reason;
            eventModal.dataset.editIndex = index;
            eventModal.classList.add('show');
        }
        if (type === 'tasks') {
            const taskToEdit = tasks[index];
            taskDateInput.value = taskToEdit.date;
            taskTextSelect.value = taskToEdit.text;
            taskModal.dataset.editIndex = index;
            taskModal.classList.add('show');
        }
      }
      
      if (type === 'appointments') renderAppointments();
      if (type === 'events') renderEvents();
      if (type === 'tasks') renderTasks();
    };
    
    saveAllBtn.addEventListener('click', async () => {
      await saveToFirebase('appointments', appointments);
      await saveToFirebase('events', events);
      await saveToFirebase('tasks', tasks);
      alert("All changes have been saved!");
      renderMonthCalendar(currentDate, calendarBody, currentMonthYearEl);
      renderMonthCalendar(backDate, backCalendarBody, backCurrentMonthYear, true);
      hideAllLists();
    });

    exitDetailsBtn.addEventListener('click', () => {
        hideAllLists();
    });

    // LOGIN
    function handleLogin(e) {
      e.preventDefault();
      if (adminPwd.value === "2169") {
        adminModal.classList.remove('show');
        mainPage.style.display = 'none';
        backOfficeSection.style.display = 'flex';
        startBackOfficeEmojiAnimation();
      } else {
        adminLoginMsg.style.display = 'block';
      }
    }
    loginForm.addEventListener('submit', handleLogin);
    adminLoginBtn.addEventListener('click', function() {
      adminModal.classList.add('show');
      adminPwd.value = '';
      adminLoginMsg.style.display = 'none';
    });
    closeAdminModal.addEventListener('click', function() {
      adminModal.classList.remove('show');
    });

    // Go back to main calendar
    goBackBtn.addEventListener('click', function() {
      backOfficeSection.style.display = 'none';
      mainPage.style.display = 'flex';
      renderMonthCalendar(currentDate, calendarBody, currentMonthYearEl);
    });

    // Block modal behavior
    blockDaysBtn.addEventListener('click', function() {
      hideAllLists();
      blockModal.classList.add('show');
    });
    
    unblockDaysBtn.addEventListener('click', function() {
      hideAllLists();
      blockedDaysList.style.display = 'block';
      saveAllContainer.style.display = 'flex';
      renderBlockedDays();
    });
    
    closeBlockModal.addEventListener('click', function() {
      blockModal.classList.remove('show');
    });
    isAllDayCheckbox.addEventListener('change', function() {
      timeRangeContainer.style.display = this.checked ? 'none' : 'block';
    });
    addBlockBtn.addEventListener('click', async function() {
      const date = blockDateInput.value;
      const reason = blockReasonInput.value || 'Blocked';
      const isAllDay = isAllDayCheckbox.checked;

      if (date) {
        if (!isAllDay) {
          const startTime = blockStartTimeInput.value;
          const endTime = blockEndTimeInput.value;
          if (startTime && endTime) {
            blockedDays.push({ date, reason: `${reason} (${startTime}-${endTime})`, startTime, endTime, isAllDay: false });
          } else {
            alert('Please select a start and end time.');
            return;
          }
        } else {
          blockedDays.push({ date, reason: `${reason} (All Day)`, isAllDay: true });
        }
        await saveToFirebase('blockedDays', blockedDays);
        renderMonthCalendar(currentDate, calendarBody, currentMonthYearEl);
        renderMonthCalendar(backDate, backCalendarBody, backCurrentMonthYear, true);
        blockModal.classList.remove('show');
        alert("Day/Hours have been successfully blocked!");
      }
    });
    
    // Add Event behavior
    addEventsBtn.addEventListener('click', function() {
      hideAllLists();
      eventModal.classList.add('show');
      eventModal.dataset.editIndex = '';
      eventDateInput.value = '';
      eventText.value = '';
    });
    closeEventModal.addEventListener('click', function() {
      eventModal.classList.remove('show');
    });
    addEventForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      const date = eventDateInput.value;
      const reason = eventText.value;
      const editIndex = eventModal.dataset.editIndex;

      if (date && reason) {
        if (editIndex !== '') {
            events[editIndex] = { date, reason, completed: events[editIndex].completed };
        } else {
            events.push({ date, reason, completed: false });
        }
        await saveToFirebase('events', events);
        renderEvents();
        eventModal.classList.remove('show');
        renderMonthCalendar(currentDate, calendarBody, currentMonthYearEl);
        renderMonthCalendar(backDate, backCalendarBody, backCurrentMonthYear, true);
        alert("Event has been successfully saved!");
        hideAllLists();
      }
    });

    // Add Task behavior
    addTasksBtn.addEventListener('click', function() {
      hideAllLists();
      taskModal.classList.add('show');
      taskModal.dataset.editIndex = '';
      taskDateInput.value = '';
      taskTextSelect.value = '';
    });
    closeTaskModal.addEventListener('click', function() {
      taskModal.classList.remove('show');
    });
    addTaskForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      const taskText = taskTextSelect.value;
      const date = taskDateInput.value;
      const editIndex = taskModal.dataset.editIndex;

      if (taskText && date) {
        if (editIndex !== '') {
            tasks[editIndex] = { text: taskText, date, completed: tasks[editIndex].completed };
        } else {
            tasks.push({ text: taskText, date, completed: false });
        }
        await saveToFirebase('tasks', tasks);
        renderTasks();
        taskModal.classList.remove('show');
        renderMonthCalendar(currentDate, calendarBody, currentMonthYearEl);
        renderMonthCalendar(backDate, backCalendarBody, backCurrentMonthYear, true);
        alert("Task has been successfully saved!");
        hideAllLists();
      }
    });

    // View Events / Tasks / Appointments buttons
    viewAppointmentsBtn.addEventListener('click', () => {
      hideAllLists();
      appointmentsList.style.display = 'block';
      saveAllContainer.style.display = 'flex';
      renderAppointments();
    });

    viewEventsBtn.addEventListener('click', () => {
      hideAllLists();
      eventsList.style.display = 'block';
      saveAllContainer.style.display = 'flex';
      renderEvents();
    });

    viewTasksBtn.addEventListener('click', () => {
      hideAllLists();
      tasksList.style.display = 'block';
      saveAllContainer.style.display = 'flex';
      renderTasks();
    });

    // Dismiss modals on background click or Esc
    Array.from(document.querySelectorAll('.modal')).forEach(function(modal) {
      modal.addEventListener('click', function(e) {
        if (e.target === modal) modal.classList.remove("show");
      });
    });

    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape') {
        document.getElementById('adminModal').classList.remove("show");
        document.getElementById('bookingModal').classList.remove("show");
        document.getElementById('blockModal').classList.remove("show");
        document.getElementById('taskModal').classList.remove("show");
        document.getElementById('eventModal').classList.remove("show");
      }
    });

    // Front-end emoji animation
    function startFrontendEmojiAnimation() {
        const emojis = ['🧩', '🎯', '📅', '🗓️', '📝', '⏰', '🔔', '💡', '⭐', '❤️'];
        let emojiIndex = 0;

        setInterval(() => {
            animatedEmoji.textContent = emojis[emojiIndex];
            animatedEmoji.style.animation = 'none'; 
            animatedEmoji.offsetHeight; 
            animatedEmoji.style.animation = null; 
            emojiIndex = (emojiIndex + 1) % emojis.length;
        }, 2000); 
    }
    
    // Back-office banner emoji animation
    function startBackOfficeEmojiAnimation() {
        const backOfficeEmojis = ['🧩', '🎯', '✨', '🗓️', '✅', '💡', '🚀', '⭐', '❤️', '💼'];
        let currentEmojiIndex = 0;
        
        if (backOfficeAnimatedEmoji) {
            backOfficeAnimatedEmoji.style.animation = 'none';
            backOfficeAnimatedEmoji.offsetHeight;
        }

        setInterval(() => {
            backOfficeAnimatedEmoji.textContent = backOfficeEmojis[currentEmojiIndex];
            backOfficeAnimatedEmoji.style.animation = 'none';
            void backOfficeAnimatedEmoji.offsetWidth;
            backOfficeAnimatedEmoji.style.animation = 'bounce-spin-shake 3s ease-in-out forwards';
            currentEmojiIndex = (currentEmojiIndex + 1) % backOfficeEmojis.length;
        }, 3000);
    }

    // Initial render calls
    renderMonthCalendar(currentDate, calendarBody, currentMonthYearEl);
    renderMonthCalendar(backDate, backCalendarBody, backCurrentMonthYear, true);
  </script>
</body>
</html>
